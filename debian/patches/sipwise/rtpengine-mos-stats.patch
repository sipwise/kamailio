--- a/modules/rtpengine/rtpengine.c
+++ b/modules/rtpengine/rtpengine.c
@@ -238,6 +238,7 @@
 static int hash_table_tout = 3600;
 static int hash_table_size = 256;
 static int setid_default = DEFAULT_RTPP_SET_ID;
+static str mos_average_pv_param = {NULL, 0};
 
 static char ** rtpp_strings=0;
 static int rtpp_sets=0; /*used in rtpengine_set_store()*/
@@ -289,6 +290,14 @@
 
 static pv_elem_t *extra_id_pv = NULL;
 
+static pv_elem_t *mos_average_pv = NULL;
+static pv_elem_t *mos_min_pv = NULL;
+static pv_elem_t *mos_max_pv = NULL;
+static void (*parse_call_stats)(bencode_item_t *);
+
+static void do_parse_call_stats(bencode_item_t *);
+static void dummy_parse_call_stats(bencode_item_t *);
+
 static cmd_export_t cmds[] = {
 	{"set_rtpengine_set",	(cmd_function)set_rtpengine_set_f,	1,
 		fixup_set_id, 0,
@@ -355,6 +364,9 @@
 	{"hash_table_tout",       INT_PARAM, &hash_table_tout        },
 	{"hash_table_size",       INT_PARAM, &hash_table_size        },
 	{"setid_default",         INT_PARAM, &setid_default          },
+	{"mos_average_pv",        PARAM_STR, &mos_average_pv_param   },
+	{"mos_min_pv",            PARAM_STR, &mos_min_pv_param       },
+	{"mos_max_pv",            PARAM_STR, &mos_max_pv_param       },
 	{0, 0, 0}
 };
 
@@ -1615,6 +1627,22 @@
 }
 
 
+static int pv_parse_var(str *inp, pv_elem_t **outp, int *got_any) {
+	if (inp->s && *inp->s) {
+		inp->len = strlen(inp->s);
+		if(pv_parse_format(inp, outp) < 0) {
+			LM_ERR("malformed PV string: %s\n", inp->s);
+			return -1;
+		}
+		if (got_any)
+			*got_any = 1;
+	} else {
+		*outp = NULL;
+	}
+	return 0;
+}
+
+
 static int
 mod_init(void)
 {
@@ -1622,6 +1650,7 @@
 	pv_spec_t *avp_spec;
 	unsigned short avp_flags;
 	str s;
+	int got_any_mos_pvs = 0;
 
 	if(register_mi_mod(exports.name, mi_cmds)!=0)
 	{
@@ -1709,15 +1738,16 @@
 		}
 	}
 
-	if (extra_id_pv_param.s && *extra_id_pv_param.s) {
-		extra_id_pv_param.len = strlen(extra_id_pv_param.s);
-		if(pv_parse_format(&extra_id_pv_param, &extra_id_pv) < 0) {
-			LM_ERR("malformed PV string: %s\n", extra_id_pv_param.s);
-			return -1;
-		}
-	} else {
-		extra_id_pv = NULL;
-	}
+	if (pv_parse_var(&extra_id_pv_param, &extra_id_pv, NULL))
+		return -1;
+	if (pv_parse_var(&mos_average_pv_param, &mos_average_pv, &got_any_mos_pvs))
+		return -1;
+	if (pv_parse_var(&mos_min_pv_param, &mos_min_pv, &got_any_mos_pvs))
+		return -1;
+	if (pv_parse_var(&mos_max_pv_param, &mos_max_pv, &got_any_mos_pvs))
+		return -1;
+
+	parse_call_stats = got_any_mos_pvs ? do_parse_call_stats : dummy_parse_call_stats;
 
 	if (setid_avp_param) {
 		s.s = setid_avp_param; s.len = strlen(s.s);
@@ -2960,8 +2990,20 @@
 	return 1;
 }
 
+static void do_parse_call_stats(bencode_item_t *dict) {
+}
+
+static void dummy_parse_call_stats(bencode_item_t *dict) {
+}
+
 static int rtpengine_delete(struct sip_msg *msg, const char *flags) {
-	return rtpp_function_call_simple(msg, OP_DELETE, flags);
+	bencode_buffer_t bencbuf;
+	bencode_item_t *ret = rtpp_function_call_ok(&bencbuf, msg, OP_DELETE, flags, NULL);
+	if (!ret)
+		return -1;
+	parse_call_stats(ret);
+	bencode_buffer_free(&bencbuf);
+	return 1;
 }
 
 static int rtpengine_rtpp_set_wrap(struct sip_msg *msg, int (*func)(struct sip_msg *msg, void *, int),
