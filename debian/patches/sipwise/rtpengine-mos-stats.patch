--- a/modules/rtpengine/rtpengine.c
+++ b/modules/rtpengine/rtpengine.c
@@ -184,6 +184,7 @@
 static int rtpengine_offer1_f(struct sip_msg *, char *, char *);
 static int rtpengine_delete1_f(struct sip_msg *, char *, char *);
 static int rtpengine_manage1_f(struct sip_msg *, char *, char *);
+static int rtpengine_query1_f(struct sip_msg *, char *, char *);
 
 static int parse_flags(struct ng_flags_parse *, struct sip_msg *, enum rtpe_operation *, const char *);
 
@@ -284,11 +285,51 @@
 /* tm */
 static struct tm_binds tmb;
 
-/*0-> disabled, 1 ->enabled*/
-unsigned int *natping_state=0;
-
 static pv_elem_t *extra_id_pv = NULL;
 
+
+struct minmax_mos_stats {
+	str mos_param;
+	str at_param;
+	str packetloss_param;
+	str jitter_param;
+	str roundtrip_param;
+	str samples_param;
+
+	pv_elem_t *mos_pv;
+	pv_elem_t *at_pv;
+	pv_elem_t *packetloss_pv;
+	pv_elem_t *jitter_pv;
+	pv_elem_t *roundtrip_pv;
+	pv_elem_t *samples_pv;
+};
+struct minmax_mos_label_stats {
+	str label_param;
+	pv_elem_t *label_pv;
+
+	struct minmax_mos_stats min,
+				max,
+				average;
+};
+struct minmax_stats_vals {
+	long long mos;
+	long long at;
+	long long packetloss;
+	long long jitter;
+	long long roundtrip;
+	long long samples;
+	long long avg_samples; /* our own running count to average the averages */
+};
+static struct minmax_mos_label_stats global_mos_stats,
+				     side_A_mos_stats,
+				     side_B_mos_stats;
+
+static void (*parse_call_stats)(bencode_item_t *, struct sip_msg *);
+
+static void do_parse_call_stats(bencode_item_t *, struct sip_msg *);
+static void dummy_parse_call_stats(bencode_item_t *, struct sip_msg *);
+
+
 static cmd_export_t cmds[] = {
 	{"set_rtpengine_set",	(cmd_function)set_rtpengine_set_f,	1,
 		fixup_set_id, 0,
@@ -323,6 +364,12 @@
 	{"rtpengine_delete",	(cmd_function)rtpengine_delete1_f,	1,
 		fixup_spve_null, 0,
 		ANY_ROUTE},
+	{"rtpengine_query",	(cmd_function)rtpengine_query1_f,	0,
+		0, 0,
+		ANY_ROUTE},
+	{"rtpengine_query",	(cmd_function)rtpengine_query1_f,	1,
+		fixup_spve_null, 0,
+		ANY_ROUTE},
 	{0, 0, 0, 0, 0, 0}
 };
 
@@ -355,6 +402,61 @@
 	{"hash_table_tout",       INT_PARAM, &hash_table_tout        },
 	{"hash_table_size",       INT_PARAM, &hash_table_size        },
 	{"setid_default",         INT_PARAM, &setid_default          },
+
+	/* MOS stats output */
+	/* global averages */
+	{"mos_min_pv",                PARAM_STR, &global_mos_stats.min.mos_param             },
+	{"mos_min_at_pv",             PARAM_STR, &global_mos_stats.min.at_param              },
+	{"mos_min_packetloss_pv",     PARAM_STR, &global_mos_stats.min.packetloss_param      },
+	{"mos_min_jitter_pv",         PARAM_STR, &global_mos_stats.min.jitter_param          },
+	{"mos_min_roundtrip_pv",      PARAM_STR, &global_mos_stats.min.roundtrip_param       },
+	{"mos_max_pv",                PARAM_STR, &global_mos_stats.max.mos_param             },
+	{"mos_max_at_pv",             PARAM_STR, &global_mos_stats.max.at_param              },
+	{"mos_max_packetloss_pv",     PARAM_STR, &global_mos_stats.max.packetloss_param      },
+	{"mos_max_jitter_pv",         PARAM_STR, &global_mos_stats.max.jitter_param          },
+	{"mos_max_roundtrip_pv",      PARAM_STR, &global_mos_stats.max.roundtrip_param       },
+	{"mos_average_pv",            PARAM_STR, &global_mos_stats.average.mos_param         },
+	{"mos_average_packetloss_pv", PARAM_STR, &global_mos_stats.average.packetloss_param  },
+	{"mos_average_jitter_pv",     PARAM_STR, &global_mos_stats.average.jitter_param      },
+	{"mos_average_roundtrip_pv",  PARAM_STR, &global_mos_stats.average.roundtrip_param   },
+	{"mos_average_samples_pv",    PARAM_STR, &global_mos_stats.average.samples_param     },
+
+	/* designated side A */
+	{"mos_A_label_pv",              PARAM_STR, &side_A_mos_stats.label_param               },
+	{"mos_min_pv_A",                PARAM_STR, &side_A_mos_stats.min.mos_param             },
+	{"mos_min_at_pv_A",             PARAM_STR, &side_A_mos_stats.min.at_param              },
+	{"mos_min_packetloss_pv_A",     PARAM_STR, &side_A_mos_stats.min.packetloss_param      },
+	{"mos_min_jitter_pv_A",         PARAM_STR, &side_A_mos_stats.min.jitter_param          },
+	{"mos_min_roundtrip_pv_A",      PARAM_STR, &side_A_mos_stats.min.roundtrip_param       },
+	{"mos_max_pv_A",                PARAM_STR, &side_A_mos_stats.max.mos_param             },
+	{"mos_max_at_pv_A",             PARAM_STR, &side_A_mos_stats.max.at_param              },
+	{"mos_max_packetloss_pv_A",     PARAM_STR, &side_A_mos_stats.max.packetloss_param      },
+	{"mos_max_jitter_pv_A",         PARAM_STR, &side_A_mos_stats.max.jitter_param          },
+	{"mos_max_roundtrip_pv_A",      PARAM_STR, &side_A_mos_stats.max.roundtrip_param       },
+	{"mos_average_pv_A",            PARAM_STR, &side_A_mos_stats.average.mos_param         },
+	{"mos_average_packetloss_pv_A", PARAM_STR, &side_A_mos_stats.average.packetloss_param  },
+	{"mos_average_jitter_pv_A",     PARAM_STR, &side_A_mos_stats.average.jitter_param      },
+	{"mos_average_roundtrip_pv_A",  PARAM_STR, &side_A_mos_stats.average.roundtrip_param   },
+	{"mos_average_samples_pv_A",    PARAM_STR, &side_A_mos_stats.average.samples_param     },
+
+	/* designated side B */
+	{"mos_B_label_pv",              PARAM_STR, &side_B_mos_stats.label_param               },
+	{"mos_min_pv_B",                PARAM_STR, &side_B_mos_stats.min.mos_param             },
+	{"mos_min_at_pv_B",             PARAM_STR, &side_B_mos_stats.min.at_param              },
+	{"mos_min_packetloss_pv_B",     PARAM_STR, &side_B_mos_stats.min.packetloss_param      },
+	{"mos_min_jitter_pv_B",         PARAM_STR, &side_B_mos_stats.min.jitter_param          },
+	{"mos_min_roundtrip_pv_B",      PARAM_STR, &side_B_mos_stats.min.roundtrip_param       },
+	{"mos_max_pv_B",                PARAM_STR, &side_B_mos_stats.max.mos_param             },
+	{"mos_max_at_pv_B",             PARAM_STR, &side_B_mos_stats.max.at_param              },
+	{"mos_max_packetloss_pv_B",     PARAM_STR, &side_B_mos_stats.max.packetloss_param      },
+	{"mos_max_jitter_pv_B",         PARAM_STR, &side_B_mos_stats.max.jitter_param          },
+	{"mos_max_roundtrip_pv_B",      PARAM_STR, &side_B_mos_stats.max.roundtrip_param       },
+	{"mos_average_pv_B",            PARAM_STR, &side_B_mos_stats.average.mos_param         },
+	{"mos_average_packetloss_pv_B", PARAM_STR, &side_B_mos_stats.average.packetloss_param  },
+	{"mos_average_jitter_pv_B",     PARAM_STR, &side_B_mos_stats.average.jitter_param      },
+	{"mos_average_roundtrip_pv_B",  PARAM_STR, &side_B_mos_stats.average.roundtrip_param   },
+	{"mos_average_samples_pv_B",    PARAM_STR, &side_B_mos_stats.average.samples_param     },
+
 	{0, 0, 0}
 };
 
@@ -1615,6 +1717,55 @@
 }
 
 
+static int pv_parse_var(str *inp, pv_elem_t **outp, int *got_any) {
+	LM_ERR("XXX pv_parse\n");
+	if (inp->s && *inp->s) {
+		LM_ERR("XXX pv_parse %s into %p\n", inp->s, outp);
+		inp->len = strlen(inp->s);
+		if(pv_parse_format(inp, outp) < 0) {
+			LM_ERR("malformed PV string: %s\n", inp->s);
+			return -1;
+		}
+		LM_ERR("XXX parsed pv to %p\n", *outp);
+		if (got_any)
+			*got_any = 1;
+	} else {
+		*outp = NULL;
+	}
+	return 0;
+}
+
+static int minmax_pv_parse(struct minmax_mos_stats *s, int *got_any) {
+	if (pv_parse_var(&s->mos_param, &s->mos_pv, got_any))
+		return -1;
+	if (pv_parse_var(&s->at_param, &s->at_pv, got_any))
+		return -1;
+	if (pv_parse_var(&s->packetloss_param, &s->packetloss_pv, got_any))
+		return -1;
+	if (pv_parse_var(&s->jitter_param, &s->jitter_pv, got_any))
+		return -1;
+	if (pv_parse_var(&s->roundtrip_param, &s->roundtrip_pv, got_any))
+		return -1;
+	if (pv_parse_var(&s->samples_param, &s->samples_pv, got_any))
+		return -1;
+	return 0;
+}
+
+static int mos_label_stats_parse(struct minmax_mos_label_stats *mmls, int *got_any) {
+	if (pv_parse_var(&mmls->label_param, &mmls->label_pv, got_any))
+		return -1;
+
+	if (minmax_pv_parse(&mmls->min, got_any))
+		return -1;
+	if (minmax_pv_parse(&mmls->max, got_any))
+		return -1;
+	if (minmax_pv_parse(&mmls->average, got_any))
+		return -1;
+
+	return 0;
+}
+
+
 static int
 mod_init(void)
 {
@@ -1622,6 +1773,7 @@
 	pv_spec_t *avp_spec;
 	unsigned short avp_flags;
 	str s;
+	int got_any_mos_pvs = 0;
 
 	if(register_mi_mod(exports.name, mi_cmds)!=0)
 	{
@@ -1709,15 +1861,17 @@
 		}
 	}
 
-	if (extra_id_pv_param.s && *extra_id_pv_param.s) {
-		extra_id_pv_param.len = strlen(extra_id_pv_param.s);
-		if(pv_parse_format(&extra_id_pv_param, &extra_id_pv) < 0) {
-			LM_ERR("malformed PV string: %s\n", extra_id_pv_param.s);
-			return -1;
-		}
-	} else {
-		extra_id_pv = NULL;
-	}
+	if (pv_parse_var(&extra_id_pv_param, &extra_id_pv, NULL))
+		return -1;
+
+	if (mos_label_stats_parse(&global_mos_stats, &got_any_mos_pvs))
+		return -1;
+	if (mos_label_stats_parse(&side_A_mos_stats, &got_any_mos_pvs))
+		return -1;
+	if (mos_label_stats_parse(&side_B_mos_stats, &got_any_mos_pvs))
+		return -1;
+
+	parse_call_stats = got_any_mos_pvs ? do_parse_call_stats : dummy_parse_call_stats;
 
 	if (setid_avp_param) {
 		s.s = setid_avp_param; s.len = strlen(s.s);
@@ -1950,9 +2104,6 @@
 	struct rtpp_node * crt_rtpp, *last_rtpp;
 
 	/*free the shared memory*/
-	if (natping_state)
-		shm_free(natping_state);
-
 	if (rtpp_no) {
 		shm_free(rtpp_no);
 		rtpp_no = NULL;
@@ -2960,8 +3111,236 @@
 	return 1;
 }
 
+static void avp_print_s(pv_elem_t *pv, char *str, int len, struct sip_msg *msg) {
+	pv_value_t val;
+
+	LM_ERR("XXX printing to pv %p\n", pv);
+	if (!pv)
+		return;
+
+	memset(&val, 0, sizeof(val));
+	val.flags = PV_VAL_STR;
+	val.rs.s = str;
+	val.rs.len = len;
+	pv->spec->setf(msg, &pv->spec->pvp, EQ_T, &val);
+}
+
+static void avp_print_decimal(pv_elem_t *pv, int num, struct sip_msg *msg) {
+	int len;
+	char buf[8];
+
+	len = snprintf(buf, sizeof(buf), "%i.%i", num / 10, abs(num % 10));
+	avp_print_s(pv, buf, len, msg);
+}
+static void avp_print_int(pv_elem_t *pv, int num, struct sip_msg *msg) {
+	int len;
+	char buf[8];
+
+	len = snprintf(buf, sizeof(buf), "%i", num);
+	avp_print_s(pv, buf, len, msg);
+}
+static void avp_print_time(pv_elem_t *pv, int num, struct sip_msg *msg) {
+	int len;
+	char buf[8];
+
+	len = snprintf(buf, sizeof(buf), "%i:%02i", num / 60, abs(num % 60));
+	avp_print_s(pv, buf, len, msg);
+}
+
+static void avp_print_mos(struct minmax_mos_stats *s, struct minmax_stats_vals *vals, long long created,
+		struct sip_msg *msg)
+{
+	if (!vals->avg_samples)
+		return;
+
+	avp_print_decimal(s->mos_pv, vals->mos / vals->avg_samples, msg);
+	avp_print_time(s->at_pv, vals->at - created, msg);
+	avp_print_int(s->packetloss_pv, vals->packetloss / vals->avg_samples, msg);
+	avp_print_int(s->jitter_pv, vals->jitter / vals->avg_samples, msg);
+	avp_print_int(s->roundtrip_pv, vals->roundtrip / vals->avg_samples, msg);
+	avp_print_int(s->samples_pv, vals->samples / vals->avg_samples, msg);
+}
+
+static int decode_mos_vals_dict(struct minmax_stats_vals *vals, bencode_item_t *dict, const char *key) {
+	bencode_item_t *mos_ent;
+
+	mos_ent = bencode_dictionary_get_expect(dict, key, BENCODE_DICTIONARY);
+	if (!mos_ent)
+		return 0;
+
+	vals->mos = bencode_dictionary_get_integer(mos_ent, "MOS", -1);
+	vals->at = bencode_dictionary_get_integer(mos_ent, "reported at", -1);
+	vals->packetloss = bencode_dictionary_get_integer(mos_ent, "packet loss", -1);
+	vals->jitter = bencode_dictionary_get_integer(mos_ent, "jitter", -1);
+	vals->roundtrip = bencode_dictionary_get_integer(mos_ent, "round-trip time", -1);
+	vals->samples = bencode_dictionary_get_integer(mos_ent, "samples", -1);
+	vals->avg_samples = 1;
+
+	return 1;
+}
+
+static void do_parse_call_stats_1(struct minmax_mos_label_stats *mmls, bencode_item_t *dict,
+		struct sip_msg *msg)
+{
+	long long created;
+	str label, check;
+	str ssrcs[4];
+	unsigned int num_ssrcs = 0,
+		     i;
+	bencode_item_t *ssrc_list,
+		       *ssrc_key,
+		       *ssrc_dict,
+		       *tags,
+		       *tag_key,
+		       *tag_dict,
+		       *medias,
+		       *media,
+		       *streams,
+		       *stream;
+	struct minmax_stats_vals min_vals = { .mos = 100 },
+				 max_vals = { .mos = -1  },
+				 average_vals = { .avg_samples = 0 },
+				 vals_decoded;
+
+	/* check if only a subset of info is requested */
+	if (mmls->label_pv) {
+		if (pv_printf_s(msg, mmls->label_pv, &label)) {
+			LM_ERR("error printing label PV\n");
+			return;
+		}
+		LM_ERR("XXX looking for label %.*s\n", label.len, label.s);
+
+		/* walk through tags to find the label we're looking for */
+		tags = bencode_dictionary_get_expect(dict, "tags", BENCODE_DICTIONARY);
+		if (!tags)
+			goto ssrcs_done;
+		LM_ERR("XXX got tags\n");
+
+		for (tag_key = tags->child; tag_key; tag_key = tag_key->sibling->sibling) {
+			tag_dict = tag_key->sibling;
+			LM_ERR("XXX got tag\n");
+			/* compare label */
+			if (bencode_dictionary_get_str(stream, "label", &check))
+				continue;
+			LM_ERR("XXX got label %.*s\n", check.len, check.s);
+			if (str_cmp(&check, &label))
+				continue;
+			LM_ERR("XXX label match\n");
+			medias = bencode_dictionary_get_expect(tag_dict, "medias", BENCODE_LIST);
+			if (!medias)
+				continue;
+			LM_ERR("XXX got medias\n");
+			for (media = medias->child; media; media = media->sibling) {
+				LM_ERR("XXX got media\n");
+				streams = bencode_dictionary_get_expect(media, "streams", BENCODE_LIST);
+				if (!streams)
+					continue;
+				LM_ERR("XXX got streams\n");
+				/* only check the first stream (RTP) */
+				stream = streams->child;
+				if (!stream)
+					continue;
+				LM_ERR("XXX got stream\n");
+				if (bencode_dictionary_get_str(stream, "SSRC", &ssrcs[num_ssrcs]))
+					continue;
+				LM_ERR("XXX got SSRC %.*s\n", ssrcs[num_ssrcs].len, ssrcs[num_ssrcs].s);
+				/* got a valid SSRC to watch for */
+				num_ssrcs++;
+				/* see if we can do more */
+				if (num_ssrcs >= (sizeof(ssrcs) / sizeof(*ssrcs)))
+					goto ssrcs_done;
+			}
+		}
+	}
+
+ssrcs_done:
+	/* now look for the stats values */
+	created = bencode_dictionary_get_integer(dict, "created", 0);
+	ssrc_list = bencode_dictionary_get_expect(dict, "SSRC", BENCODE_DICTIONARY);
+	if (!ssrc_list)
+		return;
+	LM_ERR("XXX got ssrcs\n");
+
+	for (ssrc_key = ssrc_list->child; ssrc_key; ssrc_key = ssrc_key->sibling->sibling) {
+		/* see if this is a SSRC we're interested in */
+		LM_ERR("XXX num ssrcs %i\n", num_ssrcs);
+		if (num_ssrcs == 0)
+			goto ssrc_ok;
+		LM_ERR("XXX num ssrcs %i\n", num_ssrcs);
+		if (!bencode_get_str(ssrc_key, &check))
+			continue;
+		LM_ERR("XXX checking ssrc %.*s\n", check.len, check.s);
+		for (i = 0; i < num_ssrcs; i++) {
+			LM_ERR("XXX checking ssrc against %.*s\n", ssrcs[i].len, ssrcs[i].s);
+			if (str_cmp(&ssrcs[i], &check))
+				continue;
+			LM_ERR("XXX ssrc match\n");
+			/* it's a match */
+			goto ssrc_ok;
+		}
+		/* no match */
+		LM_ERR("XXX ssrc no match\n");
+		continue;
+
+ssrc_ok:
+		LM_ERR("XXX ssrc ok\n");
+		ssrc_dict = ssrc_key->sibling;
+		if (!ssrc_dict)
+			continue;
+		LM_ERR("XXX adding ssrc vals\n");
+
+		if (decode_mos_vals_dict(&vals_decoded, ssrc_dict, "average MOS")) {
+			average_vals.avg_samples++;
+			average_vals.mos += vals_decoded.mos;
+			average_vals.packetloss += vals_decoded.packetloss;
+			average_vals.jitter += vals_decoded.jitter;
+			average_vals.roundtrip += vals_decoded.roundtrip;
+			average_vals.samples += vals_decoded.samples;
+		}
+
+		if (decode_mos_vals_dict(&vals_decoded, ssrc_dict, "highest MOS")) {
+			if (vals_decoded.mos > max_vals.mos)
+				max_vals = vals_decoded;
+		}
+		if (decode_mos_vals_dict(&vals_decoded, ssrc_dict, "lowest MOS")) {
+			if (vals_decoded.mos < min_vals.mos)
+				min_vals = vals_decoded;
+		}
+	}
+
+	avp_print_mos(&mmls->max, &max_vals, created, msg);
+	avp_print_mos(&mmls->min, &min_vals, created, msg);
+	avp_print_mos(&mmls->average, &average_vals, created, msg);
+}
+
+static void do_parse_call_stats(bencode_item_t *dict, struct sip_msg *msg) {
+	do_parse_call_stats_1(&global_mos_stats, dict, msg);
+	do_parse_call_stats_1(&side_A_mos_stats, dict, msg);
+	do_parse_call_stats_1(&side_B_mos_stats, dict, msg);
+}
+
+static void dummy_parse_call_stats(bencode_item_t *dict, struct sip_msg *msg) {
+	return;
+}
+
 static int rtpengine_delete(struct sip_msg *msg, const char *flags) {
-	return rtpp_function_call_simple(msg, OP_DELETE, flags);
+	bencode_buffer_t bencbuf;
+	bencode_item_t *ret = rtpp_function_call_ok(&bencbuf, msg, OP_DELETE, flags, NULL);
+	if (!ret)
+		return -1;
+	parse_call_stats(ret, msg);
+	bencode_buffer_free(&bencbuf);
+	return 1;
+}
+
+static int rtpengine_query(struct sip_msg *msg, const char *flags) {
+	bencode_buffer_t bencbuf;
+	bencode_item_t *ret = rtpp_function_call_ok(&bencbuf, msg, OP_QUERY, flags, NULL);
+	if (!ret)
+		return -1;
+	parse_call_stats(ret, msg);
+	bencode_buffer_free(&bencbuf);
+	return 1;
 }
 
 static int rtpengine_rtpp_set_wrap(struct sip_msg *msg, int (*func)(struct sip_msg *msg, void *, int),
@@ -3010,6 +3389,23 @@
 	return rtpengine_rtpp_set_wrap(msg, rtpengine_delete_wrap, flags.s, 1);
 }
 
+static int rtpengine_query_wrap(struct sip_msg *msg, void *d, int more) {
+	return rtpengine_query(msg, d);
+}
+
+static int
+rtpengine_query1_f(struct sip_msg* msg, char* str1, char* str2)
+{
+	str flags;
+
+	flags.s = NULL;
+	if (str1)
+		get_str_fparam(&flags, msg, (fparam_t *) str1);
+
+	return rtpengine_rtpp_set_wrap(msg, rtpengine_query_wrap, flags.s, 1);
+}
+
+
 /* This function assumes p points to a line of requested type. */
 
 static int
--- a/modules/rtpengine/README
+++ b/modules/rtpengine/README
@@ -12,26 +12,16 @@
 
 Maxim Sobolev
 
-Edited by
-
 Bogdan-Andrei Iancu
 
-Edited by
-
 Juha Heinanen
 
-Edited by
-
 Sas Ovidiu
 
-Edited by
-
 Carsten Bock
 
    ng-voice GmbH
 
-Edited by
-
 Richard Fuchs
 
    Sipwise GmbH
@@ -80,7 +70,22 @@
               4.18. url_col (string)
               4.19. weight_col (string)
               4.20. disabled_col (string)
-              4.21. setid_default (string)
+              4.21. setid_default (integer)
+              4.22. mos_min_pv (string)
+              4.23. mos_min_at_pv (string)
+              4.24. mos_min_packetloss_pv (string)
+              4.25. mos_min_jitter_pv (string)
+              4.26. mos_min_roundtrip_pv (string)
+              4.27. mos_max_pv (string)
+              4.28. mos_max_at_pv (string)
+              4.29. mos_max_packetloss_pv (string)
+              4.30. mos_max_jitter_pv (string)
+              4.31. mos_max_roundtrip_pv (string)
+              4.32. mos_average_pv (string)
+              4.33. mos_average_packetloss_pv (string)
+              4.34. mos_average_jitter_pv (string)
+              4.35. mos_average_roundtrip_pv (string)
+              4.36. mos_average_samples_pv (string)
 
         5. Functions
 
@@ -88,8 +93,9 @@
               5.2. rtpengine_offer([flags])
               5.3. rtpengine_answer([flags])
               5.4. rtpengine_delete([flags])
-              5.5. rtpengine_manage([flags])
-              5.6. start_recording()
+              5.5. rtpengine_query([flags])
+              5.6. rtpengine_manage([flags])
+              5.7. start_recording()
 
         6. Exported Pseudo Variables
 
@@ -129,18 +135,34 @@
    1.20. Set weight_col parameter
    1.21. Set disabled_col parameter
    1.22. Set setid_default parameter
-   1.23. set_rtpengine_set usage
-   1.24. rtpengine_offer usage
-   1.25. rtpengine_answer usage
-   1.26. rtpengine_delete usage
-   1.27. rtpengine_manage usage
-   1.28. start_recording usage
-   1.29. $rtpstat Usage
-   1.30. nh_enable_rtpp usage
-   1.31. nh_show_rtpp usage
-   1.32. nh_ping_rtpp usage
-   1.33. nh_reload_rtpp usage
-   1.34. nh_show_hash_total usage
+   1.23. Set mos_min_pv parameter
+   1.24. Set mos_min_at_pv parameter
+   1.25. Set mos_min_packetloss_pv parameter
+   1.26. Set mos_min_jitter_pv parameter
+   1.27. Set mos_min_roundtrip_pv parameter
+   1.28. Set mos_max_pv parameter
+   1.29. Set mos_max_at_pv parameter
+   1.30. Set mos_max_packetloss_pv parameter
+   1.31. Set mos_max_jitter_pv parameter
+   1.32. Set mos_max_roundtrip_pv parameter
+   1.33. Set mos_average_pv parameter
+   1.34. Set mos_average_packetloss_pv parameter
+   1.35. Set mos_average_jitter_pv parameter
+   1.36. Set mos_average_roundtrip_pv parameter
+   1.37. Set mos_average_samples_pv parameter
+   1.38. set_rtpengine_set usage
+   1.39. rtpengine_offer usage
+   1.40. rtpengine_answer usage
+   1.41. rtpengine_delete usage
+   1.42. rtpengine_query usage
+   1.43. rtpengine_manage usage
+   1.44. start_recording usage
+   1.45. $rtpstat Usage
+   1.46. nh_enable_rtpp usage
+   1.47. nh_show_rtpp usage
+   1.48. nh_ping_rtpp usage
+   1.49. nh_reload_rtpp usage
+   1.50. nh_show_hash_total usage
 
 Chapter 1. Admin Guide
 
@@ -175,7 +197,22 @@
         4.18. url_col (string)
         4.19. weight_col (string)
         4.20. disabled_col (string)
-        4.21. setid_default (string)
+        4.21. setid_default (integer)
+        4.22. mos_min_pv (string)
+        4.23. mos_min_at_pv (string)
+        4.24. mos_min_packetloss_pv (string)
+        4.25. mos_min_jitter_pv (string)
+        4.26. mos_min_roundtrip_pv (string)
+        4.27. mos_max_pv (string)
+        4.28. mos_max_at_pv (string)
+        4.29. mos_max_packetloss_pv (string)
+        4.30. mos_max_jitter_pv (string)
+        4.31. mos_max_roundtrip_pv (string)
+        4.32. mos_average_pv (string)
+        4.33. mos_average_packetloss_pv (string)
+        4.34. mos_average_jitter_pv (string)
+        4.35. mos_average_roundtrip_pv (string)
+        4.36. mos_average_samples_pv (string)
 
    5. Functions
 
@@ -183,8 +220,9 @@
         5.2. rtpengine_offer([flags])
         5.3. rtpengine_answer([flags])
         5.4. rtpengine_delete([flags])
-        5.5. rtpengine_manage([flags])
-        5.6. start_recording()
+        5.5. rtpengine_query([flags])
+        5.6. rtpengine_manage([flags])
+        5.7. start_recording()
 
    6. Exported Pseudo Variables
 
@@ -306,7 +344,22 @@
    4.18. url_col (string)
    4.19. weight_col (string)
    4.20. disabled_col (string)
-   4.21. setid_default (string)
+   4.21. setid_default (integer)
+   4.22. mos_min_pv (string)
+   4.23. mos_min_at_pv (string)
+   4.24. mos_min_packetloss_pv (string)
+   4.25. mos_min_jitter_pv (string)
+   4.26. mos_min_roundtrip_pv (string)
+   4.27. mos_max_pv (string)
+   4.28. mos_max_at_pv (string)
+   4.29. mos_max_packetloss_pv (string)
+   4.30. mos_max_jitter_pv (string)
+   4.31. mos_max_roundtrip_pv (string)
+   4.32. mos_average_pv (string)
+   4.33. mos_average_packetloss_pv (string)
+   4.34. mos_average_jitter_pv (string)
+   4.35. mos_average_roundtrip_pv (string)
+   4.36. mos_average_samples_pv (string)
 
 4.1. rtpengine_sock (string)
 
@@ -641,7 +694,7 @@
 modparam("rtpengine", "disabled_col", "disabled_column_name")
 ...
 
-4.21. setid_default (string)
+4.21. setid_default (integer)
 
    The default set of nodes to be used.
 
@@ -655,14 +708,258 @@
 modparam("rtpengine", "setid_default", 11)
 ...
 
+4.22. mos_min_pv (string)
+
+   The name of a pseudovariable to hold the minimum encountered MOS value
+   for the call. The value typically has a range of 1.0 through 5.0.
+
+   There is no default value.
+
+   This value is filled in after invoking“rtpengine_delete”,
+   “rtpengine_query”, or “rtpengine_manage” if the command resulted in a
+   deletion of the call (or call branch).
+
+   Example 1.23. Set mos_min_pv parameter
+...
+modparam("rtpengine", "mos_min_pv", "$avp(mos_min)")
+...
+
+4.23. mos_min_at_pv (string)
+
+   The name of a pseudovariable to hold the timestamp of when the minimum
+   MOS value was encountered during the call, such as “0:30” for 30
+   seconds after the start of the call.
+
+   There is no default value.
+
+   This value is filled in after invoking “rtpengine_delete”,
+   “rtpengine_query”, or “rtpengine_manage” if the command resulted in a
+   deletion of the call (or call branch).
+
+   Example 1.24. Set mos_min_at_pv parameter
+...
+modparam("rtpengine", "mos_min_at_pv", "$avp(mos_min_at)")
+...
+
+4.24. mos_min_packetloss_pv (string)
+
+   The name of a pseudovariable to hold the amount of packetloss in
+   percent at the time the minimum MOS value was encountered;
+
+   There is no default value.
+
+   This value is filled in after invoking “rtpengine_delete”,
+   “rtpengine_query”, or “rtpengine_manage” if the command resulted in a
+   deletion of the call (or call branch).
+
+   Example 1.25. Set mos_min_packetloss_pv parameter
+...
+modparam("rtpengine", "mos_min_packetloss_pv", "$avp(mos_min_packetloss)")
+...
+
+4.25. mos_min_jitter_pv (string)
+
+   The name of a pseudovariable to hold the amount of jitter in
+   milliseconds at the time the minimum MOS value was encountered;
+
+   There is no default value.
+
+   This value is filled in after invoking “rtpengine_delete”,
+   “rtpengine_query”, or “rtpengine_manage” if the command resulted in a
+   deletion of the call (or call branch).
+
+   Example 1.26. Set mos_min_jitter_pv parameter
+...
+modparam("rtpengine", "mos_min_jitter_pv", "$avp(mos_min_jitter)")
+...
+
+4.26. mos_min_roundtrip_pv (string)
+
+   The name of a pseudovariable to hold the packet round-trip time in
+   milliseconds at the time the minimum MOS value was encountered;
+
+   There is no default value.
+
+   This value is filled in after invoking “rtpengine_delete”,
+   “rtpengine_query”, or “rtpengine_manage” if the command resulted in a
+   deletion of the call (or call branch).
+
+   Example 1.27. Set mos_min_roundtrip_pv parameter
+...
+modparam("rtpengine", "mos_min_roundtrip_pv", "$avp(mos_min_roundtrip)")
+...
+
+4.27. mos_max_pv (string)
+
+   The name of a pseudovariable to hold the maximum encountered MOS value
+   for the call. The value typically has a range of 1.0 through 5.0.
+
+   There is no default value.
+
+   This value is filled in after invoking“rtpengine_delete”,
+   “rtpengine_query”, or “rtpengine_manage” if the command resulted in a
+   deletion of the call (or call branch).
+
+   Example 1.28. Set mos_max_pv parameter
+...
+modparam("rtpengine", "mos_max_pv", "$avp(mos_max)")
+...
+
+4.28. mos_max_at_pv (string)
+
+   The name of a pseudovariable to hold the timestamp of when the maximum
+   MOS value was encountered during the call, such as “0:30” for 30
+   seconds after the start of the call.
+
+   There is no default value.
+
+   This value is filled in after invoking “rtpengine_delete”,
+   “rtpengine_query”, or “rtpengine_manage” if the command resulted in a
+   deletion of the call (or call branch).
+
+   Example 1.29. Set mos_max_at_pv parameter
+...
+modparam("rtpengine", "mos_max_at_pv", "$avp(mos_max_at)")
+...
+
+4.29. mos_max_packetloss_pv (string)
+
+   The name of a pseudovariable to hold the amount of packetloss in
+   percent at the time the maximum MOS value was encountered;
+
+   There is no default value.
+
+   This value is filled in after invoking “rtpengine_delete”,
+   “rtpengine_query”, or “rtpengine_manage” if the command resulted in a
+   deletion of the call (or call branch).
+
+   Example 1.30. Set mos_max_packetloss_pv parameter
+...
+modparam("rtpengine", "mos_max_packetloss_pv", "$avp(mos_max_packetloss)")
+...
+
+4.30. mos_max_jitter_pv (string)
+
+   The name of a pseudovariable to hold the amount of jitter in
+   milliseconds at the time the maximum MOS value was encountered;
+
+   There is no default value.
+
+   This value is filled in after invoking “rtpengine_delete”,
+   “rtpengine_query”, or “rtpengine_manage” if the command resulted in a
+   deletion of the call (or call branch).
+
+   Example 1.31. Set mos_max_jitter_pv parameter
+...
+modparam("rtpengine", "mos_max_jitter_pv", "$avp(mos_max_jitter)")
+...
+
+4.31. mos_max_roundtrip_pv (string)
+
+   The name of a pseudovariable to hold the packet round-trip time in
+   milliseconds at the time the maximum MOS value was encountered;
+
+   There is no default value.
+
+   This value is filled in after invoking “rtpengine_delete”,
+   “rtpengine_query”, or “rtpengine_manage” if the command resulted in a
+   deletion of the call (or call branch).
+
+   Example 1.32. Set mos_max_roundtrip_pv parameter
+...
+modparam("rtpengine", "mos_max_roundtrip_pv", "$avp(mos_max_roundtrip)")
+...
+
+4.32. mos_average_pv (string)
+
+   The name of a pseudovariable to hold the average (median) MOS value for
+   the call. The value typically has a range of 1.0 through 5.0.
+
+   There is no default value.
+
+   This value is filled in after invoking“rtpengine_delete”,
+   “rtpengine_query”, or “rtpengine_manage” if the command resulted in a
+   deletion of the call (or call branch).
+
+   Example 1.33. Set mos_average_pv parameter
+...
+modparam("rtpengine", "mos_average_pv", "$avp(mos_average)")
+...
+
+4.33. mos_average_packetloss_pv (string)
+
+   The name of a pseudovariable to hold the average (median) amount of
+   packetloss in percent present throughout the call.
+
+   There is no default value.
+
+   This value is filled in after invoking “rtpengine_delete”,
+   “rtpengine_query”, or “rtpengine_manage” if the command resulted in a
+   deletion of the call (or call branch).
+
+   Example 1.34. Set mos_average_packetloss_pv parameter
+...
+modparam("rtpengine", "mos_average_packetloss_pv", "$avp(mos_average_packetloss)
+")
+...
+
+4.34. mos_average_jitter_pv (string)
+
+   The name of a pseudovariable to hold the average (median) amount of
+   jitter in milliseconds present throughout the call.
+
+   There is no default value.
+
+   This value is filled in after invoking “rtpengine_delete”,
+   “rtpengine_query”, or “rtpengine_manage” if the command resulted in a
+   deletion of the call (or call branch).
+
+   Example 1.35. Set mos_average_jitter_pv parameter
+...
+modparam("rtpengine", "mos_average_jitter_pv", "$avp(mos_average_jitter)")
+...
+
+4.35. mos_average_roundtrip_pv (string)
+
+   The name of a pseudovariable to hold the average (median) packet
+   round-trip time in milliseconds present throughout the call.
+
+   There is no default value.
+
+   This value is filled in after invoking “rtpengine_delete”,
+   “rtpengine_query”, or “rtpengine_manage” if the command resulted in a
+   deletion of the call (or call branch).
+
+   Example 1.36. Set mos_average_roundtrip_pv parameter
+...
+modparam("rtpengine", "mos_average_roundtrip_pv", "$avp(mos_average_roundtrip)")
+...
+
+4.36. mos_average_samples_pv (string)
+
+   The name of a pseudovariable to hold the number of samples used to
+   determine the other “average” MOS data points.
+
+   There is no default value.
+
+   This value is filled in after invoking “rtpengine_delete”,
+   “rtpengine_query”, or “rtpengine_manage” if the command resulted in a
+   deletion of the call (or call branch).
+
+   Example 1.37. Set mos_average_samples_pv parameter
+...
+modparam("rtpengine", "mos_average_samples_pv", "$avp(mos_average_samples)")
+...
+
 5. Functions
 
    5.1. set_rtpengine_set(setid[, setid])
    5.2. rtpengine_offer([flags])
    5.3. rtpengine_answer([flags])
    5.4. rtpengine_delete([flags])
-   5.5. rtpengine_manage([flags])
-   5.6. start_recording()
+   5.5. rtpengine_query([flags])
+   5.6. rtpengine_manage([flags])
+   5.7. start_recording()
 
 5.1.  set_rtpengine_set(setid[, setid])
 
@@ -686,7 +983,7 @@
    This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
    BRANCH_ROUTE.
 
-   Example 1.23. set_rtpengine_set usage
+   Example 1.38. set_rtpengine_set usage
 ...
 set_rtpengine_set("2");
 rtpengine_offer();
@@ -887,7 +1184,7 @@
 
    This function can be used from ANY_ROUTE.
 
-   Example 1.24. rtpengine_offer usage
+   Example 1.39. rtpengine_offer usage
 route {
 ...
     if (is_method("INVITE")) {
@@ -931,25 +1228,42 @@
    This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
    FAILURE_ROUTE, BRANCH_ROUTE.
 
-   Example 1.25. rtpengine_answer usage
+   Example 1.40. rtpengine_answer usage
 
    See rtpengine_offer() function example above for example.
 
 5.4.  rtpengine_delete([flags])
 
-   Tears down the RTPProxy session for the current call.
+   Tears down the RTPProxy session for the current call. This populates
+   the statics pseudovariables (such “mos_min_pv” etc).
 
    See rtpengine_offer() function description above for the meaning of the
    parameters. Note that not all flags make sense for a “delete”.
 
    This function can be used from ANY_ROUTE.
 
-   Example 1.26. rtpengine_delete usage
+   Example 1.41. rtpengine_delete usage
 ...
 rtpengine_delete();
 ...
 
-5.5.  rtpengine_manage([flags])
+5.5.  rtpengine_query([flags])
+
+   Queries the RTP proxy about the current status and statistics of a
+   running call. This populates the statics pseudovariables (such
+   “mos_min_pv” etc).
+
+   See rtpengine_offer() function description above for the meaning of the
+   parameters. Note that not all flags make sense for a “query”.
+
+   This function can be used from ANY_ROUTE.
+
+   Example 1.42. rtpengine_query usage
+...
+rtpengine_query();
+...
+
+5.6.  rtpengine_manage([flags])
 
    Manage the RTPProxy session - it combines the functionality of
    rtpengine_offer(), rtpengine_answer() and rtpengine_delete(), detecting
@@ -978,12 +1292,12 @@
 
    This function can be used from ANY_ROUTE.
 
-   Example 1.27. rtpengine_manage usage
+   Example 1.43. rtpengine_manage usage
 ...
 rtpengine_manage();
 ...
 
-5.6.  start_recording()
+5.7.  start_recording()
 
    This function will send a signal to the RTP proxy to record the RTP
    stream on the RTP proxy. This function is not supported by Sipwise
@@ -991,7 +1305,7 @@
 
    This function can be used from REQUEST_ROUTE and ONREPLY_ROUTE.
 
-   Example 1.28. start_recording usage
+   Example 1.44. start_recording usage
 ...
 start_recording();
 ...
@@ -1007,7 +1321,7 @@
    packet counters. The statistics must be retrieved before the session is
    deleted (before rtpengine_delete()).
 
-   Example 1.29. $rtpstat Usage
+   Example 1.45. $rtpstat Usage
 ...
     append_hf("X-RTP-Statistics: $rtpstat\r\n");
 ...
@@ -1046,7 +1360,7 @@
    NOTE: When specify the IPv6 RTP proxy url one must prefix it with :: to
    escape the :: from the IPv6 address. See the example below.
 
-   Example 1.30.  nh_enable_rtpp usage
+   Example 1.46.  nh_enable_rtpp usage
 ...
 $ kamctl fifo nh_enable_rtpp udp:192.168.2.133:8081 0
 $ kamctl fifo nh_enable_rtpp ::udp6:fe80::9a90:96ff:fea8:fd99:9999 1
@@ -1069,7 +1383,7 @@
    NOTE: When specify the IPv6 RTP proxy url one must prefix it with :: to
    escape the :: from the IPv6 address. See the example below.
 
-   Example 1.31.  nh_show_rtpp usage
+   Example 1.47.  nh_show_rtpp usage
 ...
 $ kamctl fifo nh_show_rtpp udp:192.168.2.133:8081
 $ kamctl fifo nh_show_rtpp ::udp6:fe80::9a90:96ff:fea8:fd99:9999
@@ -1089,7 +1403,7 @@
    NOTE: When specify the IPv6 RTP proxy url one must prefix it with :: to
    escape the :: from the IPv6 address. See the example below.
 
-   Example 1.32.  nh_ping_rtpp usage
+   Example 1.48.  nh_ping_rtpp usage
 ...
 $ kamctl fifo nh_ping_rtpp udp:192.168.2.133:8081
 $ kamctl fifo nh_ping_rtpp ::udp6:fe80::9a90:96ff:fea8:fd99:9999
@@ -1106,7 +1420,7 @@
    is enabled, the sessions are still allowed to finish for the hidden old
    nodes.
 
-   Example 1.33.  nh_reload_rtpp usage
+   Example 1.49.  nh_reload_rtpp usage
 ...
 $ kamctl fifo nh_reload_rtpp
 ...
@@ -1116,7 +1430,7 @@
    Print the total number of hash entries in the hash table at a given
    moment.
 
-   Example 1.34.  nh_show_hash_total usage
+   Example 1.50.  nh_show_hash_total usage
 ...
 $ kamctl fifo nh_show_hash_total
 ...
--- a/modules/rtpengine/doc/rtpengine_admin.xml
+++ b/modules/rtpengine/doc/rtpengine_admin.xml
@@ -625,7 +625,7 @@
 
 
 	<section id="rtpengine.p.setid_default">
-		<title><varname>setid_default</varname> (string)</title>
+		<title><varname>setid_default</varname> (integer)</title>
 		<para>
 			The default set of nodes to be used.
 		</para>
@@ -646,6 +646,373 @@
 		</example>
 	</section>
 
+
+	<section id="rtpengine.p.mos_min_pv">
+		<title><varname>mos_min_pv</varname> (string)</title>
+		<para>
+			The name of a pseudovariable to hold the minimum encountered MOS value for the call.
+			The value typically has a range of 1.0 through 5.0.
+		</para>
+		<para>
+			There is no default value.
+		</para>
+		<para>
+			This value is filled in after invoking<quote>rtpengine_delete</quote>,
+			<quote>rtpengine_query</quote>, or <quote>rtpengine_manage</quote> if the
+			command resulted in a deletion of the call (or call branch).
+		</para>
+		<example>
+		<title>Set <varname>mos_min_pv</varname> parameter</title>
+<programlisting format="linespecific">
+...
+modparam("rtpengine", "mos_min_pv", "$avp(mos_min)")
+...
+</programlisting>
+		</example>
+	</section>
+
+	<section id="rtpengine.p.mos_min_at_pv">
+		<title><varname>mos_min_at_pv</varname> (string)</title>
+		<para>
+			The name of a pseudovariable to hold the timestamp of when the minimum MOS value
+			was encountered during the call, such as <quote>0:30</quote> for 30 seconds
+			after the start of the call.
+		</para>
+		<para>
+			There is no default value.
+		</para>
+		<para>
+			This value is filled in after invoking <quote>rtpengine_delete</quote>,
+			<quote>rtpengine_query</quote>, or <quote>rtpengine_manage</quote> if the
+			command resulted in a deletion of the call (or call branch).
+		</para>
+		<example>
+		<title>Set <varname>mos_min_at_pv</varname> parameter</title>
+<programlisting format="linespecific">
+...
+modparam("rtpengine", "mos_min_at_pv", "$avp(mos_min_at)")
+...
+</programlisting>
+		</example>
+	</section>
+
+	<section id="rtpengine.p.mos_min_packetloss_pv">
+		<title><varname>mos_min_packetloss_pv</varname> (string)</title>
+		<para>
+			The name of a pseudovariable to hold the amount of packetloss in percent
+			at the time the minimum MOS value was encountered;
+		</para>
+		<para>
+			There is no default value.
+		</para>
+		<para>
+			This value is filled in after invoking <quote>rtpengine_delete</quote>,
+			<quote>rtpengine_query</quote>, or <quote>rtpengine_manage</quote> if the
+			command resulted in a deletion of the call (or call branch).
+		</para>
+		<example>
+		<title>Set <varname>mos_min_packetloss_pv</varname> parameter</title>
+<programlisting format="linespecific">
+...
+modparam("rtpengine", "mos_min_packetloss_pv", "$avp(mos_min_packetloss)")
+...
+</programlisting>
+		</example>
+	</section>
+
+	<section id="rtpengine.p.mos_min_jitter_pv">
+		<title><varname>mos_min_jitter_pv</varname> (string)</title>
+		<para>
+			The name of a pseudovariable to hold the amount of jitter in milliseconds
+			at the time the minimum MOS value was encountered;
+		</para>
+		<para>
+			There is no default value.
+		</para>
+		<para>
+			This value is filled in after invoking <quote>rtpengine_delete</quote>,
+			<quote>rtpengine_query</quote>, or <quote>rtpengine_manage</quote> if the
+			command resulted in a deletion of the call (or call branch).
+		</para>
+		<example>
+		<title>Set <varname>mos_min_jitter_pv</varname> parameter</title>
+<programlisting format="linespecific">
+...
+modparam("rtpengine", "mos_min_jitter_pv", "$avp(mos_min_jitter)")
+...
+</programlisting>
+		</example>
+	</section>
+
+	<section id="rtpengine.p.mos_min_roundtrip_pv">
+		<title><varname>mos_min_roundtrip_pv</varname> (string)</title>
+		<para>
+			The name of a pseudovariable to hold the packet round-trip time in milliseconds
+			at the time the minimum MOS value was encountered;
+		</para>
+		<para>
+			There is no default value.
+		</para>
+		<para>
+			This value is filled in after invoking <quote>rtpengine_delete</quote>,
+			<quote>rtpengine_query</quote>, or <quote>rtpengine_manage</quote> if the
+			command resulted in a deletion of the call (or call branch).
+		</para>
+		<example>
+		<title>Set <varname>mos_min_roundtrip_pv</varname> parameter</title>
+<programlisting format="linespecific">
+...
+modparam("rtpengine", "mos_min_roundtrip_pv", "$avp(mos_min_roundtrip)")
+...
+</programlisting>
+		</example>
+	</section>
+
+
+	<section id="rtpengine.p.mos_max_pv">
+		<title><varname>mos_max_pv</varname> (string)</title>
+		<para>
+			The name of a pseudovariable to hold the maximum encountered MOS value for the call.
+			The value typically has a range of 1.0 through 5.0.
+		</para>
+		<para>
+			There is no default value.
+		</para>
+		<para>
+			This value is filled in after invoking<quote>rtpengine_delete</quote>,
+			<quote>rtpengine_query</quote>, or <quote>rtpengine_manage</quote> if the
+			command resulted in a deletion of the call (or call branch).
+		</para>
+		<example>
+		<title>Set <varname>mos_max_pv</varname> parameter</title>
+<programlisting format="linespecific">
+...
+modparam("rtpengine", "mos_max_pv", "$avp(mos_max)")
+...
+</programlisting>
+		</example>
+	</section>
+
+	<section id="rtpengine.p.mos_max_at_pv">
+		<title><varname>mos_max_at_pv</varname> (string)</title>
+		<para>
+			The name of a pseudovariable to hold the timestamp of when the maximum MOS value
+			was encountered during the call, such as <quote>0:30</quote> for 30 seconds
+			after the start of the call.
+		</para>
+		<para>
+			There is no default value.
+		</para>
+		<para>
+			This value is filled in after invoking <quote>rtpengine_delete</quote>,
+			<quote>rtpengine_query</quote>, or <quote>rtpengine_manage</quote> if the
+			command resulted in a deletion of the call (or call branch).
+		</para>
+		<example>
+		<title>Set <varname>mos_max_at_pv</varname> parameter</title>
+<programlisting format="linespecific">
+...
+modparam("rtpengine", "mos_max_at_pv", "$avp(mos_max_at)")
+...
+</programlisting>
+		</example>
+	</section>
+
+	<section id="rtpengine.p.mos_max_packetloss_pv">
+		<title><varname>mos_max_packetloss_pv</varname> (string)</title>
+		<para>
+			The name of a pseudovariable to hold the amount of packetloss in percent
+			at the time the maximum MOS value was encountered;
+		</para>
+		<para>
+			There is no default value.
+		</para>
+		<para>
+			This value is filled in after invoking <quote>rtpengine_delete</quote>,
+			<quote>rtpengine_query</quote>, or <quote>rtpengine_manage</quote> if the
+			command resulted in a deletion of the call (or call branch).
+		</para>
+		<example>
+		<title>Set <varname>mos_max_packetloss_pv</varname> parameter</title>
+<programlisting format="linespecific">
+...
+modparam("rtpengine", "mos_max_packetloss_pv", "$avp(mos_max_packetloss)")
+...
+</programlisting>
+		</example>
+	</section>
+
+	<section id="rtpengine.p.mos_max_jitter_pv">
+		<title><varname>mos_max_jitter_pv</varname> (string)</title>
+		<para>
+			The name of a pseudovariable to hold the amount of jitter in milliseconds
+			at the time the maximum MOS value was encountered;
+		</para>
+		<para>
+			There is no default value.
+		</para>
+		<para>
+			This value is filled in after invoking <quote>rtpengine_delete</quote>,
+			<quote>rtpengine_query</quote>, or <quote>rtpengine_manage</quote> if the
+			command resulted in a deletion of the call (or call branch).
+		</para>
+		<example>
+		<title>Set <varname>mos_max_jitter_pv</varname> parameter</title>
+<programlisting format="linespecific">
+...
+modparam("rtpengine", "mos_max_jitter_pv", "$avp(mos_max_jitter)")
+...
+</programlisting>
+		</example>
+	</section>
+
+	<section id="rtpengine.p.mos_max_roundtrip_pv">
+		<title><varname>mos_max_roundtrip_pv</varname> (string)</title>
+		<para>
+			The name of a pseudovariable to hold the packet round-trip time in milliseconds
+			at the time the maximum MOS value was encountered;
+		</para>
+		<para>
+			There is no default value.
+		</para>
+		<para>
+			This value is filled in after invoking <quote>rtpengine_delete</quote>,
+			<quote>rtpengine_query</quote>, or <quote>rtpengine_manage</quote> if the
+			command resulted in a deletion of the call (or call branch).
+		</para>
+		<example>
+		<title>Set <varname>mos_max_roundtrip_pv</varname> parameter</title>
+<programlisting format="linespecific">
+...
+modparam("rtpengine", "mos_max_roundtrip_pv", "$avp(mos_max_roundtrip)")
+...
+</programlisting>
+		</example>
+	</section>
+
+	<section id="rtpengine.p.mos_average_pv">
+		<title><varname>mos_average_pv</varname> (string)</title>
+		<para>
+			The name of a pseudovariable to hold the average (median) MOS value for the call.
+			The value typically has a range of 1.0 through 5.0.
+		</para>
+		<para>
+			There is no default value.
+		</para>
+		<para>
+			This value is filled in after invoking<quote>rtpengine_delete</quote>,
+			<quote>rtpengine_query</quote>, or <quote>rtpengine_manage</quote> if the
+			command resulted in a deletion of the call (or call branch).
+		</para>
+		<example>
+		<title>Set <varname>mos_average_pv</varname> parameter</title>
+<programlisting format="linespecific">
+...
+modparam("rtpengine", "mos_average_pv", "$avp(mos_average)")
+...
+</programlisting>
+		</example>
+	</section>
+
+	<section id="rtpengine.p.mos_average_packetloss_pv">
+		<title><varname>mos_average_packetloss_pv</varname> (string)</title>
+		<para>
+			The name of a pseudovariable to hold the average (median) amount of packetloss
+			in percent
+			present throughout the call.
+		</para>
+		<para>
+			There is no default value.
+		</para>
+		<para>
+			This value is filled in after invoking <quote>rtpengine_delete</quote>,
+			<quote>rtpengine_query</quote>, or <quote>rtpengine_manage</quote> if the
+			command resulted in a deletion of the call (or call branch).
+		</para>
+		<example>
+		<title>Set <varname>mos_average_packetloss_pv</varname> parameter</title>
+<programlisting format="linespecific">
+...
+modparam("rtpengine", "mos_average_packetloss_pv", "$avp(mos_average_packetloss)")
+...
+</programlisting>
+		</example>
+	</section>
+
+	<section id="rtpengine.p.mos_average_jitter_pv">
+		<title><varname>mos_average_jitter_pv</varname> (string)</title>
+		<para>
+			The name of a pseudovariable to hold the average (median) amount of jitter
+			in milliseconds
+			present throughout the call.
+		</para>
+		<para>
+			There is no default value.
+		</para>
+		<para>
+			This value is filled in after invoking <quote>rtpengine_delete</quote>,
+			<quote>rtpengine_query</quote>, or <quote>rtpengine_manage</quote> if the
+			command resulted in a deletion of the call (or call branch).
+		</para>
+		<example>
+		<title>Set <varname>mos_average_jitter_pv</varname> parameter</title>
+<programlisting format="linespecific">
+...
+modparam("rtpengine", "mos_average_jitter_pv", "$avp(mos_average_jitter)")
+...
+</programlisting>
+		</example>
+	</section>
+
+	<section id="rtpengine.p.mos_average_roundtrip_pv">
+		<title><varname>mos_average_roundtrip_pv</varname> (string)</title>
+		<para>
+			The name of a pseudovariable to hold the average (median) packet round-trip
+			time in milliseconds
+			present throughout the call.
+		</para>
+		<para>
+			There is no default value.
+		</para>
+		<para>
+			This value is filled in after invoking <quote>rtpengine_delete</quote>,
+			<quote>rtpengine_query</quote>, or <quote>rtpengine_manage</quote> if the
+			command resulted in a deletion of the call (or call branch).
+		</para>
+		<example>
+		<title>Set <varname>mos_average_roundtrip_pv</varname> parameter</title>
+<programlisting format="linespecific">
+...
+modparam("rtpengine", "mos_average_roundtrip_pv", "$avp(mos_average_roundtrip)")
+...
+</programlisting>
+		</example>
+	</section>
+
+	<section id="rtpengine.p.mos_average_samples_pv">
+		<title><varname>mos_average_samples_pv</varname> (string)</title>
+		<para>
+			The name of a pseudovariable to hold the number of samples used to determine
+			the other <quote>average</quote> MOS data points.
+		</para>
+		<para>
+			There is no default value.
+		</para>
+		<para>
+			This value is filled in after invoking <quote>rtpengine_delete</quote>,
+			<quote>rtpengine_query</quote>, or <quote>rtpengine_manage</quote> if the
+			command resulted in a deletion of the call (or call branch).
+		</para>
+		<example>
+		<title>Set <varname>mos_average_samples_pv</varname> parameter</title>
+<programlisting format="linespecific">
+...
+modparam("rtpengine", "mos_average_samples_pv", "$avp(mos_average_samples)")
+...
+</programlisting>
+		</example>
+	</section>
+
 	</section>
 
 
@@ -1025,6 +1392,7 @@
 		</title>
 		<para>
 		Tears down the RTPProxy session for the current call.
+		This populates the statics pseudovariables (such <quote>mos_min_pv</quote> etc).
 		</para>
 		<para>
 		See rtpengine_offer() function description above for the meaning of the
@@ -1041,6 +1409,30 @@
 ...
 </programlisting>
 		</example>
+	</section>
+	<section id="rtpengine.f.rtpengine_query">
+		<title>
+		<function moreinfo="none">rtpengine_query([flags])</function>
+		</title>
+		<para>
+		Queries the &rtp; proxy about the current status and statistics of a running
+		call. This populates the statics pseudovariables (such <quote>mos_min_pv</quote> etc).
+		</para>
+		<para>
+		See rtpengine_offer() function description above for the meaning of the
+		parameters. Note that not all flags make sense for a <quote>query</quote>.
+		</para>
+		<para>
+		This function can be used from ANY_ROUTE.
+		</para>
+		<example>
+		<title><function>rtpengine_query</function> usage</title>
+		<programlisting format="linespecific">
+...
+rtpengine_query();
+...
+</programlisting>
+		</example>
 	</section>
 
     <section id="rtpengine.f.rtpengine_manage">
