--- a/modules/acc/acc_logic.c
+++ b/modules/acc/acc_logic.c
@@ -355,6 +355,34 @@ void acc_onreq( struct cell* t, int type
 
 
 
+/*
+ * Extract Call-ID value
+ * assumes the callid header is already parsed
+ * (so make sure it is, before calling this function or
+ * it might fail even if the message _has_ a callid)
+ */
+int
+get_callid(struct sip_msg* _m, str* _cid)
+{
+
+        if ((parse_headers(_m, HDR_CALLID_F, 0) == -1)) {
+                LOG(L_ERR, "get_callid(): parse_headers() failed\n");
+                return -1;
+        }
+
+        if (_m->callid == NULL) {
+                LOG(L_ERR, "get_callid(): Call-ID not found\n");
+                return -1;
+        }
+
+        _cid->s = _m->callid->body.s;
+        _cid->len = _m->callid->body.len;
+        trim(_cid);
+        return 0;
+}
+
+
+
 /* is this reply of interest for accounting ? */
 static inline int should_acc_reply(struct sip_msg *req, struct sip_msg *rpl,
 				   int code)
@@ -376,12 +404,21 @@ static inline int should_acc_reply(struc
 
     if ( !is_acc_on(req) )
 	return 0;
-	
+
+    str req_callid, rpl_callid;
+    get_callid(req, &req_callid);
+    get_callid(rpl, &rpl_callid);
+
+    LM_ERR("++++++++++ early_media set to %d and code set to %d - call_id req: %.*s - call_id rpl: %.*s\n", early_media, code, req_callid.len, req_callid.s, rpl_callid.len, rpl_callid.s);
+
     if ( code<200 && !(early_media &&
 		       parse_headers(rpl,HDR_CONTENTLENGTH_F, 0) == 0 &&
 		       rpl->content_length && get_content_length(rpl) > 0))
+        LM_ERR("++++++++++ We will NOT account this reply - call_id req: %.*s - call_id rpl: %.*s\n", req_callid.len, req_callid.s, rpl_callid.len, rpl_callid.s);
 	return 0;
 
+    LM_ERR("++++++++++ We will account this reply - call_id req: %.*s - call_id rpl: %.*s\n", req_callid.len, req_callid.s, rpl_callid.len, rpl_callid.s);
+
     return 1; /* seed is through, we will account this reply */
 }
 
