From: Sipwise Development Team <support@sipwise.com>
Date: Wed, 24 Feb 2021 11:20:06 +0100
Subject: db_redis_sscan

---
 src/modules/db_redis/redis_dbase.c | 86 ++++++++++++++++++++++++++++----------
 1 file changed, 65 insertions(+), 21 deletions(-)

diff --git a/src/modules/db_redis/redis_dbase.c b/src/modules/db_redis/redis_dbase.c
index 4f1f346..49d80c8 100644
--- a/src/modules/db_redis/redis_dbase.c
+++ b/src/modules/db_redis/redis_dbase.c
@@ -589,7 +589,7 @@ err:
 static int db_redis_build_query_keys(km_redis_con_t *con, const str *table_name,
         const db_key_t *_k, const db_val_t *_v, const db_op_t *_op, const int _n,
         redis_key_t **query_keys, int *query_keys_count, int **manual_keys, int *manual_keys_count,
-        int *do_table_scan, uint64_t *ts_scan_start, str *ts_scan_key) {
+        int *do_table_scan, uint64_t *ts_scan_start, str *ts_scan_key, str *ts_scan_table) {
 
     struct str_hash_entry *table_e;
     redis_table_t *table;
@@ -704,6 +704,21 @@ static int db_redis_build_query_keys(km_redis_con_t *con, const str *table_name,
                 LM_DBG("will use key '%.*s' at offset %llx for timestamp/int range scan\n",
                         keyname.len, keyname.s, (unsigned long long) *ts_scan_start);
                 *ts_scan_key = keyname;
+                if (ts_scan_table) {
+                    if (ts_scan_table->s)
+                        pkg_free(ts_scan_table->s);
+                    // <version>:<table>::index::<type>
+                    ts_scan_table->len = table->version_code.len + table_name->len + 9 + type->type.len;
+                    ts_scan_table->s = pkg_malloc(ts_scan_table->len + 1);
+                    if (!ts_scan_table->s) {
+                        LM_ERR("Failed to allocate memory for ts_scan_table\n");
+                        goto err;
+                    }
+                    sprintf(ts_scan_table->s, "%.*s%.*s::index::%.*s",
+                            table->version_code.len, table->version_code.s,
+                            table_name->len, table_name->s,
+                            type->type.len, type->type.s);
+                }
                 keyname.s = NULL;
             }
             else if (keyname.s) {
@@ -740,6 +755,7 @@ err:
 }
 
 static int db_redis_scan_query_keys_pattern(km_redis_con_t *con, const str *match_pattern,
+        const str *index_key,
         const int _n,
         redis_key_t **query_keys, int *query_keys_count,
         int **manual_keys, int *manual_keys_count, unsigned int match_count_start_val) {
@@ -766,9 +782,21 @@ static int db_redis_scan_query_keys_pattern(km_redis_con_t *con, const str *matc
     do {
         snprintf(cursor_str, sizeof(cursor_str), "%lu", cursor);
 
-        if (db_redis_key_add_string(&query_v, "SCAN", 4) != 0) {
-            LM_ERR("Failed to add scan command to scan query\n");
-            goto err;
+        if (!index_key) {
+            if (db_redis_key_add_string(&query_v, "SCAN", 4) != 0) {
+                LM_ERR("Failed to add scan command to scan query\n");
+                goto err;
+            }
+        }
+        else {
+            if (db_redis_key_add_string(&query_v, "SSCAN", 5) != 0) {
+                LM_ERR("Failed to add scan command to scan query\n");
+                goto err;
+            }
+            if (db_redis_key_add_string(&query_v, index_key->s, index_key->len) != 0) {
+                LM_ERR("Failed to add scan command to scan query\n");
+                goto err;
+            }
         }
         if (db_redis_key_add_string(&query_v, cursor_str, strlen(cursor_str)) != 0) {
             LM_ERR("Failed to add cursor to scan query\n");
@@ -930,7 +958,8 @@ err:
 static int db_redis_scan_query_keys(km_redis_con_t *con, const str *table_name,
         const int _n,
         redis_key_t **query_keys, int *query_keys_count,
-        int **manual_keys, int *manual_keys_count, uint64_t ts_scan_start, const str *ts_scan_key) {
+        int **manual_keys, int *manual_keys_count, uint64_t ts_scan_start, const str *ts_scan_key,
+        const str *ts_scan_table) {
 
     struct str_hash_entry *table_e;
     redis_table_t *table;
@@ -965,7 +994,7 @@ static int db_redis_scan_query_keys(km_redis_con_t *con, const str *table_name,
                 table->version_code.len, table->version_code.s,
                 table_name->len, table_name->s);
         str match_pattern = {match, len};
-        ret = db_redis_scan_query_keys_pattern(con, &match_pattern, _n, query_keys, query_keys_count,
+        ret = db_redis_scan_query_keys_pattern(con, &match_pattern, ts_scan_table, _n, query_keys, query_keys_count,
                 manual_keys, manual_keys_count, 1000);
         pkg_free(match);
         return ret;
@@ -1027,7 +1056,7 @@ static int db_redis_scan_query_keys(km_redis_con_t *con, const str *table_name,
             str match_pattern = {match, len};
             LM_DBG("running timestamp/int range matching using pattern '%.*s'\n", len, match);
 
-            ret = db_redis_scan_query_keys_pattern(con, &match_pattern, _n, &set_keys, &set_keys_count,
+            ret = db_redis_scan_query_keys_pattern(con, &match_pattern, ts_scan_table, _n, &set_keys, &set_keys_count,
                     manual_keys, manual_keys_count, 5000);
             if (ret)
                 goto out;
@@ -1072,7 +1101,7 @@ static int db_redis_scan_query_keys(km_redis_con_t *con, const str *table_name,
         str match_pattern = {match, len};
         LM_DBG("running timestamp/int range matching using pattern '%.*s'\n", len, match);
 
-        ret = db_redis_scan_query_keys_pattern(con, &match_pattern, _n, &set_keys, &set_keys_count,
+        ret = db_redis_scan_query_keys_pattern(con, &match_pattern, ts_scan_table, _n, &set_keys, &set_keys_count,
                 manual_keys, manual_keys_count, 5000);
         if (ret)
             goto out;
@@ -1085,7 +1114,7 @@ static int db_redis_scan_query_keys(km_redis_con_t *con, const str *table_name,
         str match_pattern = {match, len};
         LM_DBG("running timestamp/int range matching using pattern '%.*s'\n", len, match);
 
-        ret = db_redis_scan_query_keys_pattern(con, &match_pattern, _n, &set_keys, &set_keys_count,
+        ret = db_redis_scan_query_keys_pattern(con, &match_pattern, ts_scan_table, _n, &set_keys, &set_keys_count,
                 manual_keys, manual_keys_count, 5000);
         if (ret)
             goto out;
@@ -1443,7 +1472,7 @@ static int db_redis_perform_query(const db1_con_t* _h, km_redis_con_t *con, cons
         const int _n, const int _nc, db1_res_t** _r,
         redis_key_t **keys, int *keys_count,
         int **manual_keys, int *manual_keys_count, int do_table_scan, uint64_t ts_scan_start,
-        const str *ts_scan_key) {
+        const str *ts_scan_key, const str *ts_scan_table) {
 
     redisReply *reply = NULL;
     redis_key_t *query_v = NULL;
@@ -1477,7 +1506,7 @@ static int db_redis_perform_query(const db1_con_t* _h, km_redis_con_t *con, cons
         }
         if (db_redis_scan_query_keys(con, CON_TABLE(_h), _n,
                     keys, keys_count,
-                    manual_keys, manual_keys_count, ts_scan_start, ts_scan_key) != 0) {
+                    manual_keys, manual_keys_count, ts_scan_start, ts_scan_key, ts_scan_table) != 0) {
             LM_ERR("failed to scan query keys\n");
             goto error;
         }
@@ -1628,7 +1657,7 @@ static int db_redis_perform_delete(const db1_con_t* _h, km_redis_con_t *con, con
         const db_val_t* _v, const db_op_t *_op, const int _n,
         redis_key_t **keys, int *keys_count,
         int **manual_keys, int *manual_keys_count, int do_table_scan, uint64_t ts_scan_start,
-        const str *ts_scan_key) {
+        const str *ts_scan_key, const str *ts_scan_table) {
 
     int i = 0, j = 0;
     redis_key_t *k = NULL;
@@ -1661,7 +1690,7 @@ static int db_redis_perform_delete(const db1_con_t* _h, km_redis_con_t *con, con
         }
         if (db_redis_scan_query_keys(con, CON_TABLE(_h), _n,
                     keys, keys_count,
-                    manual_keys, manual_keys_count, ts_scan_start, ts_scan_key) != 0) {
+                    manual_keys, manual_keys_count, ts_scan_start, ts_scan_key, ts_scan_table) != 0) {
             LM_ERR("failed to scan query keys\n");
             goto error;
         }
@@ -1874,7 +1903,7 @@ static int db_redis_perform_update(const db1_con_t* _h, km_redis_con_t *con, con
         const int _n, const int _nu,
         redis_key_t **keys, int *keys_count,
         int **manual_keys, int *manual_keys_count, int do_table_scan, uint64_t ts_scan_start,
-        const str *ts_scan_key) {
+        const str *ts_scan_key, const str *ts_scan_table) {
 
     redisReply *reply = NULL;
     redis_key_t *query_v = NULL;
@@ -1903,7 +1932,7 @@ static int db_redis_perform_update(const db1_con_t* _h, km_redis_con_t *con, con
         }
         if (db_redis_scan_query_keys(con, CON_TABLE(_h), _n,
                     keys, keys_count,
-                    manual_keys, manual_keys_count, ts_scan_start, ts_scan_key) != 0) {
+                    manual_keys, manual_keys_count, ts_scan_start, ts_scan_key, ts_scan_table) != 0) {
             LM_ERR("failed to scan query keys\n");
             goto error;
         }
@@ -2294,6 +2323,7 @@ int db_redis_query(const db1_con_t* _h, const db_key_t* _k, const db_op_t* _op,
     int do_table_scan = 0;
     uint64_t ts_scan_start = 0;
     str ts_scan_key = {0,};
+    str ts_scan_table = {0,};
 
     redis_key_t *keys = NULL;
     int keys_count = 0;
@@ -2365,7 +2395,7 @@ int db_redis_query(const db1_con_t* _h, const db_key_t* _k, const db_op_t* _op,
     if (_n > 0) {
         if (db_redis_build_query_keys(con, CON_TABLE(_h), _k, _v, query_ops, _n,
                     &keys, &keys_count, &manual_keys, &manual_keys_count, &do_table_scan, &ts_scan_start,
-                    &ts_scan_key) != 0) {
+                    &ts_scan_key, &ts_scan_table) != 0) {
             LM_ERR("failed to build query keys\n");
             goto error;
         }
@@ -2383,7 +2413,7 @@ int db_redis_query(const db1_con_t* _h, const db_key_t* _k, const db_op_t* _op,
     }
 
     if (db_redis_perform_query(_h, con, _k, _v, query_ops, _c, _n, _nc, _r,
-        &keys, &keys_count, &manual_keys, &manual_keys_count, do_table_scan, ts_scan_start, &ts_scan_key) != 0) {
+        &keys, &keys_count, &manual_keys, &manual_keys_count, do_table_scan, ts_scan_start, &ts_scan_key, &ts_scan_table) != 0) {
         goto error;
     }
 
@@ -2399,6 +2429,8 @@ int db_redis_query(const db1_con_t* _h, const db_key_t* _k, const db_op_t* _op,
     }
     if (ts_scan_key.s)
         pkg_free(ts_scan_key.s);
+    if (ts_scan_table.s)
+        pkg_free(ts_scan_table.s);
 
     db_redis_consume_replies(con);
     return 0;
@@ -2414,6 +2446,8 @@ error:
     }
     if (ts_scan_key.s)
         pkg_free(ts_scan_key.s);
+    if (ts_scan_table.s)
+        pkg_free(ts_scan_table.s);
     db_redis_consume_replies(con);
 
 
@@ -2599,6 +2633,7 @@ int db_redis_delete(const db1_con_t* _h, const db_key_t* _k,
     int do_table_scan = 0;
     uint64_t ts_scan_start = 0;
     str ts_scan_key = {0,};
+    str ts_scan_table = {0,};
     db_op_t *query_ops = NULL;
     int i;
 
@@ -2644,7 +2679,7 @@ int db_redis_delete(const db1_con_t* _h, const db_key_t* _k,
     if (_n > 0) {
         if (db_redis_build_query_keys(con, CON_TABLE(_h), _k, _v, query_ops, _n,
                     &keys, &keys_count, &manual_keys, &manual_keys_count, &do_table_scan, &ts_scan_start,
-                    &ts_scan_key) != 0) {
+                    &ts_scan_key, &ts_scan_table) != 0) {
             LM_ERR("failed to build query keys\n");
             goto error;
         }
@@ -2662,7 +2697,7 @@ int db_redis_delete(const db1_con_t* _h, const db_key_t* _k,
     }
 
     if (db_redis_perform_delete(_h, con, _k, _v, query_ops, _n,
-        &keys, &keys_count, &manual_keys, &manual_keys_count, do_table_scan, ts_scan_start, &ts_scan_key) != 0) {
+        &keys, &keys_count, &manual_keys, &manual_keys_count, do_table_scan, ts_scan_start, &ts_scan_key, &ts_scan_table) != 0) {
         goto error;
     }
 
@@ -2676,6 +2711,8 @@ int db_redis_delete(const db1_con_t* _h, const db_key_t* _k,
         pkg_free(manual_keys);
     if (ts_scan_key.s)
         pkg_free(ts_scan_key.s);
+    if (ts_scan_table.s)
+        pkg_free(ts_scan_table.s);
     db_redis_consume_replies(con);
 
     return 0;
@@ -2690,6 +2727,8 @@ error:
         pkg_free(manual_keys);
     if (ts_scan_key.s)
         pkg_free(ts_scan_key.s);
+    if (ts_scan_table.s)
+        pkg_free(ts_scan_table.s);
     db_redis_consume_replies(con);
     return -1;
 }
@@ -2714,6 +2753,7 @@ int db_redis_update(const db1_con_t* _h, const db_key_t* _k,
     int do_table_scan = 0;
     uint64_t ts_scan_start = 0;
     str ts_scan_key = {0,};
+    str ts_scan_table = {0,};
 
     redis_key_t *keys = NULL;
     int keys_count = 0;
@@ -2764,7 +2804,7 @@ int db_redis_update(const db1_con_t* _h, const db_key_t* _k,
     if (_n > 0) {
         if (db_redis_build_query_keys(con, CON_TABLE(_h), _k, _v, query_ops, _n,
                     &keys, &keys_count, &manual_keys, &manual_keys_count, &do_table_scan, &ts_scan_start,
-                    &ts_scan_key) != 0) {
+                    &ts_scan_key, &ts_scan_table) != 0) {
             LM_ERR("failed to build query keys\n");
             goto error;
         }
@@ -2781,7 +2821,7 @@ int db_redis_update(const db1_con_t* _h, const db_key_t* _k,
     }
 
     if (db_redis_perform_update(_h, con, _k, _v, query_ops, _uk, _uv, _n, _nu,
-        &keys, &keys_count, &manual_keys, &manual_keys_count, do_table_scan, ts_scan_start, &ts_scan_key) != 0) {
+        &keys, &keys_count, &manual_keys, &manual_keys_count, do_table_scan, ts_scan_start, &ts_scan_key, &ts_scan_table) != 0) {
         goto error;
     }
 
@@ -2797,6 +2837,8 @@ int db_redis_update(const db1_con_t* _h, const db_key_t* _k,
     }
     if (ts_scan_key.s)
         pkg_free(ts_scan_key.s);
+    if (ts_scan_table.s)
+        pkg_free(ts_scan_table.s);
     db_redis_consume_replies(con);
     return 0;
 
@@ -2811,6 +2853,8 @@ error:
     }
     if (ts_scan_key.s)
         pkg_free(ts_scan_key.s);
+    if (ts_scan_table.s)
+        pkg_free(ts_scan_table.s);
     db_redis_consume_replies(con);
     return -1;
 }
