From: Sipwise Development Team <support@sipwise.com>
Date: Wed, 17 Feb 2021 11:46:22 +0100
Subject: db_redis_versioning

---
 src/modules/db_redis/redis_dbase.c | 32 +++++++++++++++++++++++---------
 src/modules/db_redis/redis_table.c | 14 +++++++++++++-
 src/modules/db_redis/redis_table.h |  1 +
 3 files changed, 37 insertions(+), 10 deletions(-)

diff --git a/src/modules/db_redis/redis_dbase.c b/src/modules/db_redis/redis_dbase.c
index dee8fc1..5be2285 100644
--- a/src/modules/db_redis/redis_dbase.c
+++ b/src/modules/db_redis/redis_dbase.c
@@ -267,6 +267,7 @@ err:
 }
 
 static int db_redis_find_query_key(redis_key_t *key, const str *table_name,
+        redis_table_t *table,
         str *type_name, const db_key_t *_k, const db_val_t *_v, const db_op_t *_op, const int _n,
         str *key_name, int *key_found, uint64_t *ts_scan_start) {
 
@@ -306,14 +307,15 @@ static int db_redis_find_query_key(redis_key_t *key, const str *table_name,
                     break;
                 }
                 if (!key_name->len) {
-                    // <table_name>:<type>::<val>
-                    len = table_name->len + 1 + type_name->len + 2 + val.len + 1; //snprintf writes term 0 char
+                    // <version>:<table_name>:<type>::<val>
+                    len = table->version_code.len + table_name->len + 1 + type_name->len + 2 + val.len + 1; //snprintf writes term 0 char
                     key_name->s = (char*)pkg_malloc(len);
                     if (!key_name->s) {
                         LM_ERR("Failed to allocate key memory\n");
                         goto err;
                     }
-                    snprintf(key_name->s, len, "%.*s:%.*s::%.*s",
+                    snprintf(key_name->s, len, "%.*s%.*s:%.*s::%.*s",
+                            table->version_code.len, table->version_code.s,
                             table_name->len, table_name->s,
                             type_name->len, type_name->s,
                             val.len, val.s);
@@ -415,7 +417,7 @@ static int db_redis_build_entry_keys(km_redis_con_t *con, const str *table_name,
     }
     table = (redis_table_t*)table_e->u.p;
     key = table->entry_keys;
-    if (db_redis_find_query_key(key, table_name, &type_name, _k, _v, NULL, _n, &keyname, &key_found, NULL) != 0) {
+    if (db_redis_find_query_key(key, table_name, table, &type_name, _k, _v, NULL, _n, &keyname, &key_found, NULL) != 0) {
         goto err;
     }
     if (key_found) {
@@ -505,7 +507,7 @@ static int db_redis_build_type_keys(km_redis_con_t *con, const str *table_name,
         str keyname = {NULL, 0};
         key = type->keys;
 
-        if (db_redis_find_query_key(key, table_name, &type->type, _k, _v, NULL, _n, &keyname, &key_found, NULL) != 0) {
+        if (db_redis_find_query_key(key, table_name, table, &type->type, _k, _v, NULL, _n, &keyname, &key_found, NULL) != 0) {
             goto err;
         }
         if (key_found) {
@@ -562,7 +564,7 @@ static int db_redis_build_query_keys(km_redis_con_t *con, const str *table_name,
     keyname.len = 0;
     key = table->entry_keys;
 
-    if (db_redis_find_query_key(key, table_name, &typename, _k, _v, _op, _n, &keyname, &key_found, NULL) != 0) {
+    if (db_redis_find_query_key(key, table_name, table, &typename, _k, _v, _op, _n, &keyname, &key_found, NULL) != 0) {
         goto err;
     }
     if (key_found) {
@@ -580,7 +582,7 @@ static int db_redis_build_query_keys(km_redis_con_t *con, const str *table_name,
         for (type = table->types; type; type = type->next) {
             key = type->keys;
             LM_DBG("checking type '%.*s'\n", type->type.len, type->type.s);
-            if (db_redis_find_query_key(key, table_name, &type->type, _k, _v, _op, _n, &keyname,
+            if (db_redis_find_query_key(key, table_name, table, &type->type, _k, _v, _op, _n, &keyname,
                         &key_found, ts_scan_start) != 0) {
                 goto err;
             }
@@ -853,6 +855,8 @@ static int db_redis_scan_query_keys(km_redis_con_t *con, const str *table_name,
         redis_key_t **query_keys, int *query_keys_count,
         int **manual_keys, int *manual_keys_count, uint64_t ts_scan_start, const str *ts_scan_key) {
 
+    struct str_hash_entry *table_e;
+    redis_table_t *table;
     char *match = NULL;
     int ret;
     redisReply *reply = NULL;
@@ -864,14 +868,24 @@ static int db_redis_scan_query_keys(km_redis_con_t *con, const str *table_name,
     redis_key_t *set_keys = NULL;
     int set_keys_count = 0;
 
+    table_e = str_hash_get(&con->tables, table_name->s, table_name->len);
+    if (!table_e) {
+        LM_ERR("query to undefined table '%.*s', define it in schema file!\n",
+                table_name->len, table_name->s);
+        return -1;
+    }
+    table = (redis_table_t*)table_e->u.p;
+
     if (!ts_scan_start) {
         // full table scan
-        match = (char*)pkg_malloc(table_name->len + 10); // length of ':entry::*' plus \0
+        match = (char*)pkg_malloc(table->version_code.len
+                + table_name->len + 10); // length of ':entry::*' plus \0
         if (!match) {
             LM_ERR("Failed to allocate memory for match pattern\n");
             return -1;
         }
-        int len = sprintf(match, "%.*s:entry::*",
+        int len = sprintf(match, "%.*s%.*s:entry::*",
+                table->version_code.len, table->version_code.s,
                 table_name->len, table_name->s);
         str match_pattern = {match, len};
         ret = db_redis_scan_query_keys_pattern(con, &match_pattern, _n, query_keys, query_keys_count,
diff --git a/src/modules/db_redis/redis_table.c b/src/modules/db_redis/redis_table.c
index fb7c06c..956aad9 100644
--- a/src/modules/db_redis/redis_table.c
+++ b/src/modules/db_redis/redis_table.c
@@ -471,13 +471,14 @@ static struct str_hash_entry* db_redis_create_column(str *col, str *type) {
 }
 
 int db_redis_parse_keys(km_redis_con_t *con) {
-    char *p;
+    char *p, *q;
     char *start;
     char *end;
 
     str table_name;
     str type_name;
     str column_name;
+    str version_code;
 
     struct str_hash_entry *table_entry;
     redis_table_t *table;
@@ -517,6 +518,16 @@ int db_redis_parse_keys(km_redis_con_t *con) {
                 }
                 table_name.s = start;
                 table_name.len = p - start;
+
+                version_code = (str){"",0};
+                q = memchr(table_name.s, ':', table_name.len);
+                if (q) {
+                    version_code = table_name;
+                    version_code.len = q - table_name.s + 1;
+                    table_name.s = q + 1;
+                    table_name.len -= version_code.len;
+                }
+
                 state = DBREDIS_KEYS_TYPE_ST;
                 start = ++p;
                 LM_DBG("found table name '%.*s'\n", table_name.len, table_name.s);
@@ -528,6 +539,7 @@ int db_redis_parse_keys(km_redis_con_t *con) {
                     goto err;
                 }
                 table = table_entry->u.p;
+                table->version_code = version_code;
                 break;
             case DBREDIS_KEYS_TYPE_ST:
                 while(p != end && *p != ':')
diff --git a/src/modules/db_redis/redis_table.h b/src/modules/db_redis/redis_table.h
index 9e71d2a..a866b16 100644
--- a/src/modules/db_redis/redis_table.h
+++ b/src/modules/db_redis/redis_table.h
@@ -42,6 +42,7 @@ struct redis_type {
 typedef struct redis_table redis_table_t;
 struct redis_table {
     int version;
+    str version_code;
     redis_key_t *entry_keys;
     redis_type_t *types;
     struct str_hash_table columns;
