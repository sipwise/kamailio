--- a/src/modules/permissions/trusted.c
+++ b/src/modules/permissions/trusted.c
@@ -354,16 +354,18 @@ static inline int match_proto(const char
 
 	return 0;
 }
-
 /*
  * Matches from uri against patterns returned from database.  Returns number
  * of matches or -1 if none of the patterns match.
  */
-static int match_res(struct sip_msg* msg, int proto, db1_res_t* _r)
+static int match_res(struct sip_msg* msg, int proto, db1_res_t* _r, str uri)
 {
 	int i, tag_avp_type;
-	str uri, ruri;
+	str ruri;
 	char uri_string[MAX_URI_SIZE+1];
+      memcpy(uri_string, uri.s, uri.len);
+	uri_string[uri.len] = (char)0;
+
 	char ruri_string[MAX_URI_SIZE+1];
 	db_row_t* row;
 	db_val_t* val;
@@ -372,14 +374,6 @@ static int match_res(struct sip_msg* msg
 	int count = 0;
 
 	if (IS_SIP(msg)) {
-		if (parse_from_header(msg) < 0) return -1;
-		uri = get_from(msg)->uri;
-		if (uri.len > MAX_URI_SIZE) {
-			LM_ERR("message has From URI too large\n");
-			return -1;
-		}
-		memcpy(uri_string, uri.s, uri.len);
-		uri_string[uri.len] = (char)0;
 		ruri = msg->first_line.u.request.uri;
 		if (ruri.len > MAX_URI_SIZE) {
 			LM_ERR("message has Request URI too large\n");
@@ -450,6 +444,25 @@ static int match_res(struct sip_msg* msg
 		return count;
 }
 
+/*
+ * Matches from uri against patterns returned from database.  Returns number
+ * of matches or -1 if none of the patterns match.
+ */
+static int match_res(struct sip_msg* msg, int proto, db1_res_t* _r)
+{
+	str uri;
+
+	if (IS_SIP(msg)) {
+		if (parse_from_header(msg) < 0) return -1;
+		uri = get_from(msg)->uri;
+		if (uri.len > MAX_URI_SIZE) {
+			LM_ERR("message has From URI too large\n");
+			return -1;
+		}
+      }
+
+      return match_res(msg, proto, _r, uri);
+}
 
 /*
  * Checks based on given source IP address and protocol, and From URI
