--- a/src/modules/rtpengine/rtpengine_funcs.c
+++ b/src/modules/rtpengine/rtpengine_funcs.c
@@ -64,6 +64,7 @@
  * -1: error
  *  1: text or sdp
  *  2: multipart
+ *  3: trickle ice sdp fragment
  */
 int check_content_type(struct sip_msg *msg)
 {
@@ -133,8 +134,11 @@
 
 	advance(p,3,str_type,error_1);
 	x = READ(p-3) & 0x00ffffff;
-	if (!one_of_8(x,sdp_))
+	if (!one_of_8(x,sdp_)) {
+		if (strncasecmp(p-3, "trickle-ice-sdpfrag", 19) == 0)
+			return 3;
 		goto other;
+	}
 
 	if (*p==';'||*p==' '||*p=='\t'||*p=='\n'||*p=='\r'||*p==0) {
 		LM_DBG("type <%.*s> found valid\n", (int)(p-str_type.s), str_type.s);
@@ -264,7 +268,7 @@
 
 done:
 	/*LM_DBG("DEBUG:extract_body:=|%.*s|\n",body->len,body->s);*/
-	return 1;
+	return ret; /* mirrors return type of check_content_type */
 }
 
 /*
--- a/src/modules/rtpengine/rtpengine.c
+++ b/src/modules/rtpengine/rtpengine.c
@@ -338,6 +338,12 @@
 	{"rtpengine_answer",	(cmd_function)rtpengine_answer1_f,	1,
 		fixup_spve_null, 0,
 		ANY_ROUTE},
+	{"rtpengine_info",	(cmd_function)rtpengine_info1_f,	0,
+		0, 0,
+		ANY_ROUTE},
+	{"rtpengine_info",	(cmd_function)rtpengine_info1_f,	1,
+		fixup_spve_null, 0,
+		ANY_ROUTE},
 	{"rtpengine_manage",	(cmd_function)rtpengine_manage1_f,	0,
 		0, 0,
 		ANY_ROUTE},
@@ -2141,7 +2147,7 @@
 	bencode_item_t *item, *resp;
 	str viabranch = STR_NULL;
 	str body = STR_NULL, error = STR_NULL;
-	int ret, queried_nodes = 0;
+	int ret, queried_nodes = 0, cont_type = 0;
 	struct rtpp_node *node;
 	char *cp;
 	pv_value_t pv_val;
@@ -2190,7 +2196,7 @@
 				body = pv_val.rs;
 			}
 
-		} else if (extract_body(msg, &body) == -1) {
+		} else if ((cont_type = extract_body(msg, &body)) == -1) {
 			LM_ERR("can't extract body from the message\n");
 			goto error;
 		}
@@ -2212,6 +2218,10 @@
 	if (parse_flags(&ng_flags, msg, &op, flags_str))
 		goto error;
 
+	/* trickle ice sdp fragment? */
+	if (cont_type == 3)
+		bencode_list_add_string(ng_flags.flags, "fragment");
+
 	/* only add those if any flags were given at all */
 	if (ng_flags.direction && ng_flags.direction->child)
 		bencode_dictionary_add(ng_flags.dict, "direction", ng_flags.direction);
@@ -3384,6 +3394,26 @@
 	return rtpengine_rtpp_set_wrap(msg, rtpengine_manage_wrap, flags.s, 1);
 }
 
+static int rtpengine_info_wrap(struct sip_msg *msg, void *d, int more) {
+	return rtpp_function_call_simple(msg, OP_OFFER, d);
+}
+
+static int
+rtpengine_info1_f(struct sip_msg *msg, char *str1, char *str2)
+{
+	str flags;
+
+	flags.s = NULL;
+	if (str1) {
+		if (get_str_fparam(&flags, msg, (fparam_t *) str1)) {
+			LM_ERR("Error getting string parameter\n");
+			return -1;
+		}
+	}
+
+	return rtpengine_rtpp_set_wrap(msg, rtpengine_info_wrap, flags.s, 1);
+}
+
 static int rtpengine_offer_wrap(struct sip_msg *msg, void *d, int more) {
 	return rtpengine_offer_answer(msg, d, OP_OFFER, more);
 }
