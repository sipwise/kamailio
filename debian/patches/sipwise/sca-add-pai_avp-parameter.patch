From: Victor Seva <vseva@sipwise.com>
Date: Tue, 11 Mar 2025 09:34:36 +0100
Subject: sca: add pai_avp parameter

Use the avp value when creating P-Asserted-Identity instead of
values from Headers. If no value, skip header creation.
---
 src/modules/sca/sca.c           |  9 +++++++++
 src/modules/sca/sca.h           |  2 ++
 src/modules/sca/sca_call_info.c | 27 ++++++++++++++++++++-------
 src/modules/sca/sca_util.h      |  2 ++
 4 files changed, 33 insertions(+), 7 deletions(-)

diff --git a/src/modules/sca/sca.c b/src/modules/sca/sca.c
index 315c78b..57ccd77 100644
--- a/src/modules/sca/sca.c
+++ b/src/modules/sca/sca.c
@@ -102,6 +102,7 @@ str server_address = STR_NULL;
 str contact_fallback = STR_NULL;
 str from_uri_avp_param = STR_NULL;
 str to_uri_avp_param = STR_NULL;
+str pai_avp_param = STR_NULL;
 
 /* clang-format off */
 /*
@@ -170,6 +171,7 @@ static param_export_t params[] = {
 	{"server_address", PARAM_STR, &server_address},
 	{"from_uri_avp", PARAM_STR, &from_uri_avp_param},
 	{"to_uri_avp", PARAM_STR, &to_uri_avp_param},
+	{"pai_avp", PARAM_STR, &pai_avp_param},
 	{NULL, 0, NULL},
 };
 
@@ -355,6 +357,13 @@ static int sca_set_config(sca_mod *scam)
 				< 0)
 			return -1;
 	}
+
+	if(pai_avp_param.s) {
+		if(sca_process_avps(
+				   &pai_avp_param, &sca->cfg->pai_avp, &sca->cfg->pai_avp_type)
+				< 0)
+			return -1;
+	}
 	return (0);
 }
 
diff --git a/src/modules/sca/sca.h b/src/modules/sca/sca.h
index f57dcd6..18049cd 100644
--- a/src/modules/sca/sca.h
+++ b/src/modules/sca/sca.h
@@ -46,6 +46,8 @@ struct _sca_config
 	avp_name_t from_uri_avp;
 	avp_flags_t to_uri_avp_type;
 	avp_name_t to_uri_avp;
+	avp_flags_t pai_avp_type;
+	avp_name_t pai_avp;
 };
 typedef struct _sca_config sca_config;
 
diff --git a/src/modules/sca/sca_call_info.c b/src/modules/sca/sca_call_info.c
index 0152847..37bed99 100644
--- a/src/modules/sca/sca_call_info.c
+++ b/src/modules/sca/sca_call_info.c
@@ -1145,20 +1145,33 @@ static int sca_call_info_insert_asserted_identity(
 	str aor = STR_NULL;
 	str hdr = STR_NULL;
 	int len;
+	int aor_avp = 0;
 	int rc = -1;
 
+	if(sca_get_avp_value(sca->cfg->pai_avp_type, sca->cfg->pai_avp, &aor) < 0) {
+		if(sca->cfg->pai_avp.s.len > 0) {
+			LM_DBG("$avp(%.*s) has no value, skip PAI\n",
+					STR_FMT(&sca->cfg->pai_avp.s));
+			rc = 1;
+			goto done;
+		}
+		if(sca_create_canonical_aor_for_ua(msg, &aor, ua_type) < 0) {
+			LM_ERR("sca_call_info_insert_asserted_identity: failed to create "
+				   "canonical AoR\n");
+			goto done;
+		}
+	} else {
+		aor_avp = 1;
+		LM_DBG("using $avp(%.*s)[%.*s] as PAI\n", STR_FMT(&sca->cfg->pai_avp.s),
+				STR_FMT(&aor));
+	}
+
 	anchor = anchor_lump(msg, msg->eoh - msg->buf, 0, HDR_OTHER_T);
 	if(anchor == NULL) {
 		LM_ERR("Failed to anchor lump\n");
 		goto done;
 	}
 
-	if(sca_create_canonical_aor_for_ua(msg, &aor, ua_type) < 0) {
-		LM_ERR("sca_call_info_insert_asserted_identity: failed to create "
-			   "canonical AoR\n");
-		goto done;
-	}
-
 #define SCA_P_ASSERTED_IDENTITY_HDR_PREFIX "P-Asserted-Identity: "
 #define SCA_P_ASSERTED_IDENTITY_HDR_PREFIX_LEN strlen("P-Asserted-Identity: ")
 
@@ -1204,7 +1217,7 @@ static int sca_call_info_insert_asserted_identity(
 	rc = 1;
 
 done:
-	if(aor.s != NULL) {
+	if(aor_avp == 0 && aor.s != NULL) {
 		pkg_free(aor.s);
 	}
 	if(rc < 0 && hdr.s != NULL) {
diff --git a/src/modules/sca/sca_util.h b/src/modules/sca/sca_util.h
index 6c1d92f..7660c4f 100644
--- a/src/modules/sca/sca_util.h
+++ b/src/modules/sca/sca_util.h
@@ -77,4 +77,6 @@ int sca_create_canonical_aor(sip_msg_t *, str *);
 // convenient call hold detection
 int sca_call_is_held(sip_msg_t *);
 
+int sca_get_avp_value(unsigned short, int_str, str *);
+
 #endif // SCA_UTIL_H
