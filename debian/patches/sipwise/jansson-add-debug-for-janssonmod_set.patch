From: Victor Seva <vseva@sipwise.com>
Date: Wed, 13 May 2020 14:37:54 +0200
Subject: jansson: add debug for janssonmod_set()

---
 src/modules/jansson/jansson_funcs.c | 20 ++++++++++++--------
 1 file changed, 12 insertions(+), 8 deletions(-)

diff --git a/src/modules/jansson/jansson_funcs.c b/src/modules/jansson/jansson_funcs.c
index 7eceae4..8e44e80 100644
--- a/src/modules/jansson/jansson_funcs.c
+++ b/src/modules/jansson/jansson_funcs.c
@@ -26,6 +26,7 @@
 
 #include "../../core/mod_fix.h"
 #include "../../core/lvalue.h"
+#include "../../core/str.h"
 
 #include "jansson_path.h"
 #include "jansson_funcs.h"
@@ -98,7 +99,7 @@ int janssonmod_set(unsigned int append, struct sip_msg* msg, char* type_in,
 	str type_s;
 	str value_s;
 	str path_s;
-
+	char c;
 	pv_spec_t* result_pv;
 	pv_value_t result_val;
 
@@ -126,13 +127,14 @@ int janssonmod_set(unsigned int append, struct sip_msg* msg, char* type_in,
 		result_val.rs.len = strlen("{}");
 	}
 
-/*
-	ALERT("type is: %.*s\n", type_s.len, type_s.s);
-	ALERT("path is: %.*s\n", path_s.len, path_s.s);
-	ALERT("value is: %.*s\n", value_s.len, value_s.s);
-	ALERT("result is: %.*s\n", result_val.rs.len, result_val.rs.s);
-*/
 
+	LM_DBG("type is: %.*s with len: %d\n", type_s.len, type_s.s, type_s.len);
+	LM_DBG("path is: %.*s with len: %d\n", path_s.len, path_s.s, path_s.len);
+	LM_DBG("value is: %.*s with len: %d\n", value_s.len, value_s.s, value_s.len);
+	LM_DBG("result is: %.*s with len: %d\n",
+		result_val.rs.len, result_val.rs.s, result_val.rs.len);
+
+	STR_VTOZ(result_val.rs.s[result_val.rs.len], c);
 	char* result = result_val.rs.s;
 
 	json_t* result_json = NULL;
@@ -211,7 +213,7 @@ int janssonmod_set(unsigned int append, struct sip_msg* msg, char* type_in,
 	}
 
 	char* path = path_s.s;
-
+	LM_DBG("value is: %.*s with len: %d\n", value_s.len, value_s.s, value_s.len);
 	result_json = json_loads(result, JSON_REJECT_DUPLICATES, &parsing_error);
 
 	if(!result_json) {
@@ -230,11 +232,13 @@ int janssonmod_set(unsigned int append, struct sip_msg* msg, char* type_in,
 
 	if(freeme) free(freeme);
 	json_decref(result_json);
+	STR_VTOZ(result_val.rs.s[result_val.rs.len], c);
 	return 1;
 
 fail:
 	if(freeme) free(freeme);
 	json_decref(result_json);
+	STR_VTOZ(result_val.rs.s[result_val.rs.len], c);
 	return -1;
 }
 
